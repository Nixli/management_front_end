{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index';\nimport autoResize from '../../../mixin/autoResize';\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    const id = uuid();\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${id}`,\n      haloGradientId: `halo-gradient-id-${id}`,\n      /**\r\n       * @description Type Declaration\r\n       * \r\n       * interface Halo {\r\n       *    show?: boolean\r\n       *    duration?: [number, number]\r\n       *    color?: string\r\n       *    radius?: number\r\n       * }\r\n       * \r\n       * interface Text {\r\n       *    show?: boolean\r\n       *    offset?: [number, number]\r\n       *    color?: string\r\n       *    fontSize?: number\r\n       * }\r\n       * \r\n       * interface Icon {\r\n       *    show?: boolean\r\n       *    src?: string\r\n       *    width?: number\r\n       *    height?: number\r\n       * }\r\n       * \r\n       * interface Point {\r\n       *    name: string\r\n       *    coordinate: [number, number]\r\n       *    halo?: Halo\r\n       *    text?: Text\r\n       *    icon?: Icon\r\n       * }\r\n       * \r\n       * interface Line {\r\n       *    width?: number\r\n       *    color?: string\r\n       *    orbitColor?: string\r\n       *    duration?: [number, number]\r\n       *    radius?: string\r\n       * }\r\n       * \r\n       * interface Flyline extends Line {\r\n       *    source: string\r\n       *    target: string\r\n       * }\r\n       * \r\n       * interface FlylineWithPath extends Flyline {\r\n       *    d: string\r\n       *    path: [[number, number], [number, number], [number, number]]\r\n       *    key: string\r\n       * }\r\n       */\n      defaultConfig: {\n        /**\r\n         * @description Flyline chart points\r\n         * @type {Point[]}\r\n         * @default points = []\r\n         */\n        points: [],\n        /**\r\n         * @description Lines\r\n         * @type {Flyline[]}\r\n         * @default lines = []\r\n         */\n        lines: [],\n        /**\r\n         * @description Global halo configuration\r\n         * @type {Halo}\r\n         */\n        halo: {\n          /**\r\n           * @description Whether to show halo\r\n           * @type {Boolean}\r\n           * @default show = false\r\n           */\n          show: false,\n          /**\r\n           * @description Halo animation duration (1s = 10)\r\n           * @type {[number, number]}\r\n           */\n          duration: [20, 30],\n          /**\r\n           * @description Halo color\r\n           * @type {String}\r\n           * @default color = '#fb7293'\r\n           */\n          color: '#fb7293',\n          /**\r\n           * @description Halo radius\r\n           * @type {Number}\r\n           * @default radius = 120\r\n           */\n          radius: 120\n        },\n        /**\r\n         * @description Global text configuration\r\n         * @type {Text}\r\n         */\n        text: {\n          /**\r\n           * @description Whether to show text\r\n           * @type {Boolean}\r\n           * @default show = false\r\n           */\n          show: false,\n          /**\r\n           * @description Text offset\r\n           * @type {[number, number]}\r\n           * @default offset = [0, 15]\r\n           */\n          offset: [0, 15],\n          /**\r\n           * @description Text color\r\n           * @type {String}\r\n           * @default color = '#ffdb5c'\r\n           */\n          color: '#ffdb5c',\n          /**\r\n           * @description Text font size\r\n           * @type {Number}\r\n           * @default fontSize = 12\r\n           */\n          fontSize: 12\n        },\n        /**\r\n         * @description Global icon configuration\r\n         * @type {Icon}\r\n         */\n        icon: {\n          /**\r\n           * @description Whether to show icon\r\n           * @type {Boolean}\r\n           * @default show = false\r\n           */\n          show: false,\n          /**\r\n           * @description Icon src\r\n           * @type {String}\r\n           * @default src = ''\r\n           */\n          src: '',\n          /**\r\n           * @description Icon width\r\n           * @type {Number}\r\n           * @default width = 15\r\n           */\n          width: 15,\n          /**\r\n           * @description Icon height\r\n           * @type {Number}\r\n           * @default width = 15\r\n           */\n          height: 15\n        },\n        /**\r\n         * @description Global line configuration\r\n         * @type {Line}\r\n         */\n        line: {\n          /**\r\n           * @description Line width\r\n           * @type {Number}\r\n           * @default width = 1\r\n           */\n          width: 1,\n          /**\r\n           * @description Flyline color\r\n           * @type {String}\r\n           * @default color = '#ffde93'\r\n           */\n          color: '#ffde93',\n          /**\r\n           * @description Orbit color\r\n           * @type {String}\r\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\r\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\r\n           * @description Flyline animation duration\r\n           * @type {[number, number]}\r\n           * @default duration = [20, 30]\r\n           */\n          duration: [20, 30],\n          /**\r\n           * @description Flyline radius\r\n           * @type {Number}\r\n           * @default radius = 100\r\n           */\n          radius: 100\n        },\n        /**\r\n         * @description Back ground image url\r\n         * @type {String}\r\n         * @default bgImgSrc = ''\r\n         */\n        bgImgSrc: '',\n        /**\r\n         * @description K value\r\n         * @type {Number}\r\n         * @default k = -0.5\r\n         * @example k = -1 ~ 1\r\n         */\n        k: -0.5,\n        /**\r\n         * @description Flyline curvature\r\n         * @type {Number}\r\n         * @default curvature = 5\r\n         */\n        curvature: 5,\n        /**\r\n         * @description Relative points position\r\n         * @type {Boolean}\r\n         * @default relative = true\r\n         */\n        relative: true\n      },\n      /**\r\n       * @description Fly line data\r\n       * @type {FlylineWithPath[]}\r\n       * @default flylines = []\r\n       */\n      flylines: [],\n      /**\r\n       * @description Fly line lengths\r\n       * @type {Number[]}\r\n       * @default flylineLengths = []\r\n       */\n      flylineLengths: [],\n      /**\r\n       * @description Fly line points\r\n       * @default flylinePoints = []\r\n       */\n      flylinePoints: [],\n      mergedConfig: null\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    async calcData() {\n      const {\n        mergeConfig,\n        calcflylinePoints,\n        calcLinePaths\n      } = this;\n      mergeConfig();\n      calcflylinePoints();\n      calcLinePaths();\n      const {\n        calcLineLengths\n      } = this;\n      await calcLineLengths();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n      const {\n        points,\n        lines,\n        halo,\n        text,\n        icon,\n        line\n      } = mergedConfig;\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {});\n        item.text = deepMerge(deepClone(text, true), item.text || {});\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {});\n        return item;\n      });\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item);\n      });\n      this.mergedConfig = mergedConfig;\n    },\n    calcflylinePoints() {\n      const {\n        mergedConfig,\n        width,\n        height\n      } = this;\n      const {\n        relative,\n        points\n      } = mergedConfig;\n      this.flylinePoints = points.map((item, i) => {\n        const {\n          coordinate: [x, y],\n          halo,\n          icon,\n          text\n        } = item;\n        if (relative) item.coordinate = [x * width, y * height];\n        item.halo.time = randomExtend(...halo.duration) / 10;\n        const {\n          width: iw,\n          height: ih\n        } = icon;\n        item.icon.x = item.coordinate[0] - iw / 2;\n        item.icon.y = item.coordinate[1] - ih / 2;\n        const [ox, oy] = text.offset;\n        item.text.x = item.coordinate[0] + ox;\n        item.text.y = item.coordinate[1] + oy;\n        item.key = `${item.coordinate.toString()}${i}`;\n        return item;\n      });\n    },\n    calcLinePaths() {\n      const {\n        getPath,\n        mergedConfig\n      } = this;\n      const {\n        points,\n        lines\n      } = mergedConfig;\n      this.flylines = lines.map(item => {\n        const {\n          source,\n          target,\n          duration\n        } = item;\n        const sourcePoint = points.find(({\n          name\n        }) => name === source).coordinate;\n        const targetPoint = points.find(({\n          name\n        }) => name === target).coordinate;\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))));\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`;\n        const key = `path${path.toString()}`;\n        const time = randomExtend(...duration) / 10;\n        return {\n          ...item,\n          path,\n          key,\n          d,\n          time\n        };\n      });\n    },\n    getPath(start, end) {\n      const {\n        getControlPoint\n      } = this;\n      const controlPoint = getControlPoint(start, end);\n      return [start, controlPoint, end];\n    },\n    getControlPoint([sx, sy], [ex, ey]) {\n      const {\n        getKLinePointByx,\n        mergedConfig\n      } = this;\n      const {\n        curvature,\n        k\n      } = mergedConfig;\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2];\n      const distance = getPointDistance([sx, sy], [ex, ey]);\n      const targetLength = distance / curvature;\n      const disDived = targetLength / 2;\n      let [dx, dy] = [mx, my];\n      do {\n        dx += disDived;\n        dy = getKLinePointByx(k, [mx, my], dx)[1];\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength);\n      return [dx, dy];\n    },\n    getKLinePointByx(k, [lx, ly], x) {\n      const y = ly - k * lx + k * x;\n      return [x, y];\n    },\n    async calcLineLengths() {\n      const {\n        $nextTick,\n        flylines,\n        $refs\n      } = this;\n      await $nextTick();\n      this.flylineLengths = flylines.map(({\n        key\n      }) => $refs[key][0].getTotalLength());\n    },\n    consoleClickPos({\n      offsetX,\n      offsetY\n    }) {\n      const {\n        width,\n        height,\n        dev\n      } = this;\n      if (!dev) return;\n      const relativeX = (offsetX / width).toFixed(2);\n      const relativeY = (offsetY / height).toFixed(2);\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`);\n    }\n  }\n};","map":{"version":3,"names":["deepMerge","deepClone","randomExtend","getPointDistance","uuid","autoResize","name","mixins","props","config","type","Object","default","dev","Boolean","data","id","ref","unique","Math","random","flylineGradientId","haloGradientId","defaultConfig","points","lines","halo","show","duration","color","radius","text","offset","fontSize","icon","src","width","height","line","orbitColor","bgImgSrc","k","curvature","relative","flylines","flylineLengths","flylinePoints","mergedConfig","watch","calcData","methods","afterAutoResizeMixinInit","onResize","mergeConfig","calcflylinePoints","calcLinePaths","calcLineLengths","map","item","i","coordinate","x","y","time","iw","ih","ox","oy","key","toString","getPath","source","target","sourcePoint","find","targetPoint","path","v","parseFloat","toFixed","d","start","end","getControlPoint","controlPoint","sx","sy","ex","ey","getKLinePointByx","mx","my","distance","targetLength","disDived","dx","dy","lx","ly","$nextTick","$refs","getTotalLength","consoleClickPos","offsetX","offsetY","relativeX","relativeY","console","warn"],"sources":["node_modules/@jiaminghi/data-view/lib/components/flylineChartEnhanced/src/main.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"dv-flyline-chart-enhanced\"\r\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgSrc : ''})`\"\r\n    :ref=\"ref\"\r\n    @click=\"consoleClickPos\"\r\n  >\r\n    <svg v-if=\"flylines.length\" :width=\"width\" :height=\"height\">\r\n      <defs>\r\n        <radialGradient\r\n          :id=\"flylineGradientId\"\r\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\r\n        >\r\n          <stop\r\n            offset=\"0%\" stop-color=\"#fff\"\r\n            stop-opacity=\"1\"\r\n          />\r\n          <stop\r\n            offset=\"100%\" stop-color=\"#fff\"\r\n            stop-opacity=\"0\"\r\n          />\r\n        </radialGradient>\r\n\r\n        <radialGradient\r\n          :id=\"haloGradientId\"\r\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\r\n        >\r\n          <stop\r\n            offset=\"0%\" stop-color=\"#fff\"\r\n            stop-opacity=\"0\"\r\n          />\r\n          <stop\r\n            offset=\"100%\" stop-color=\"#fff\"\r\n            stop-opacity=\"1\"\r\n          />\r\n        </radialGradient>\r\n      </defs>\r\n\r\n      <!-- points -->\r\n      <g v-for=\"point in flylinePoints\" :key=\"point.key + Math.random()\">\r\n        <defs>\r\n          <circle\r\n            v-if=\"point.halo.show\"\r\n            :id=\"`halo${unique}${point.key}`\"\r\n            :cx=\"point.coordinate[0]\"\r\n            :cy=\"point.coordinate[1]\"\r\n          >\r\n            <animate\r\n              attributeName=\"r\"\r\n              :values=\"`1;${point.halo.radius}`\"\r\n              :dur=\"`${point.halo.time}s`\"\r\n              repeatCount=\"indefinite\"\r\n            />\r\n            <animate\r\n              attributeName=\"opacity\"\r\n              values=\"1;0\"\r\n              :dur=\"`${point.halo.time}s`\"\r\n              repeatCount=\"indefinite\"\r\n            />\r\n          </circle>\r\n        </defs>\r\n\r\n        <!-- halo gradient mask -->\r\n        <mask :id=\"`mask${unique}${point.key}`\">\r\n          <use\r\n            v-if=\"point.halo.show\"\r\n            :xlink:href=\"`#halo${unique}${point.key}`\"\r\n            :fill=\"`url(#${haloGradientId})`\"\r\n          />\r\n        </mask>\r\n\r\n        <!-- point halo -->\r\n        <use\r\n          v-if=\"point.halo.show\"\r\n          :xlink:href=\"`#halo${unique}${point.key}`\"\r\n          :fill=\"point.halo.color\"\r\n          :mask=\"`url(#mask${unique}${point.key})`\"\r\n        />\r\n\r\n        <!-- point icon -->\r\n        <image\r\n          v-if=\"point.icon.show\"\r\n          :xlink:href=\"point.icon.src\"\r\n          :width=\"point.icon.width\"\r\n          :height=\"point.icon.height\"\r\n          :x=\"point.icon.x\"\r\n          :y=\"point.icon.y\"\r\n        />\r\n\r\n        <!-- point text -->\r\n        <text\r\n          v-if=\"point.text.show\"\r\n          :style=\"`fontSize:${point.text.fontSize}px;color:${point.text.color}`\"\r\n          :fill=\"point.text.color\"\r\n          :x=\"point.text.x\"\r\n          :y=\"point.text.y\"\r\n        >\r\n          {{ point.name }}\r\n        </text>\r\n      </g>\r\n\r\n      <!-- flylines -->\r\n      <g v-for=\"(line, i) in flylines\" :key=\"line.key + Math.random()\">\r\n        <defs>\r\n          <path\r\n            :id=\"line.key\"\r\n            :ref=\"line.key\"\r\n            :d=\"line.d\"\r\n            fill=\"transparent\"\r\n          />\r\n        </defs>\r\n\r\n        <!-- orbit line -->\r\n        <use\r\n          :xlink:href=\"`#${line.key}`\"\r\n          :stroke-width=\"line.width\"\r\n          :stroke=\"line.orbitColor\"\r\n        />\r\n\r\n        <!-- fly line gradient mask -->\r\n        <mask :id=\"`mask${unique}${line.key}`\">\r\n          <circle cx=\"0\" cy=\"0\" :r=\"line.radius\" :fill=\"`url(#${flylineGradientId})`\">\r\n            <animateMotion\r\n              :dur=\"line.time\"\r\n              :path=\"line.d\"\r\n              rotate=\"auto\"\r\n              repeatCount=\"indefinite\"\r\n            />\r\n          </circle>\r\n        </mask>\r\n\r\n        <!-- fly line -->\r\n        <use\r\n          v-if=\"flylineLengths[i]\"\r\n          :xlink:href=\"`#${line.key}`\"\r\n          :stroke-width=\"line.width\"\r\n          :stroke=\"line.color\"\r\n          :mask=\"`url(#mask${unique}${line.key})`\"\r\n        >\r\n          <animate\r\n            attributeName=\"stroke-dasharray\"\r\n            :from=\"`0, ${flylineLengths[i]}`\"\r\n            :to=\"`${flylineLengths[i]}, 0`\"\r\n            :dur=\"line.time\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </use>\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\r\n\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nexport default {\r\n  name: 'DvFlylineChartEnhanced',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    dev: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      ref: 'dv-flyline-chart-enhanced',\r\n      unique: Math.random(),\r\n      flylineGradientId: `flyline-gradient-id-${id}`,\r\n      haloGradientId: `halo-gradient-id-${id}`,\r\n      /**\r\n       * @description Type Declaration\r\n       * \r\n       * interface Halo {\r\n       *    show?: boolean\r\n       *    duration?: [number, number]\r\n       *    color?: string\r\n       *    radius?: number\r\n       * }\r\n       * \r\n       * interface Text {\r\n       *    show?: boolean\r\n       *    offset?: [number, number]\r\n       *    color?: string\r\n       *    fontSize?: number\r\n       * }\r\n       * \r\n       * interface Icon {\r\n       *    show?: boolean\r\n       *    src?: string\r\n       *    width?: number\r\n       *    height?: number\r\n       * }\r\n       * \r\n       * interface Point {\r\n       *    name: string\r\n       *    coordinate: [number, number]\r\n       *    halo?: Halo\r\n       *    text?: Text\r\n       *    icon?: Icon\r\n       * }\r\n       * \r\n       * interface Line {\r\n       *    width?: number\r\n       *    color?: string\r\n       *    orbitColor?: string\r\n       *    duration?: [number, number]\r\n       *    radius?: string\r\n       * }\r\n       * \r\n       * interface Flyline extends Line {\r\n       *    source: string\r\n       *    target: string\r\n       * }\r\n       * \r\n       * interface FlylineWithPath extends Flyline {\r\n       *    d: string\r\n       *    path: [[number, number], [number, number], [number, number]]\r\n       *    key: string\r\n       * }\r\n       */\r\n      defaultConfig: {\r\n        /**\r\n         * @description Flyline chart points\r\n         * @type {Point[]}\r\n         * @default points = []\r\n         */\r\n        points: [],\r\n        /**\r\n         * @description Lines\r\n         * @type {Flyline[]}\r\n         * @default lines = []\r\n         */\r\n        lines: [],\r\n        /**\r\n         * @description Global halo configuration\r\n         * @type {Halo}\r\n         */\r\n        halo: {\r\n          /**\r\n           * @description Whether to show halo\r\n           * @type {Boolean}\r\n           * @default show = false\r\n           */\r\n          show: false,\r\n          /**\r\n           * @description Halo animation duration (1s = 10)\r\n           * @type {[number, number]}\r\n           */\r\n          duration: [20, 30],\r\n          /**\r\n           * @description Halo color\r\n           * @type {String}\r\n           * @default color = '#fb7293'\r\n           */\r\n          color: '#fb7293',\r\n          /**\r\n           * @description Halo radius\r\n           * @type {Number}\r\n           * @default radius = 120\r\n           */\r\n          radius: 120\r\n        },\r\n        /**\r\n         * @description Global text configuration\r\n         * @type {Text}\r\n         */\r\n        text: {\r\n          /**\r\n           * @description Whether to show text\r\n           * @type {Boolean}\r\n           * @default show = false\r\n           */\r\n          show: false,\r\n          /**\r\n           * @description Text offset\r\n           * @type {[number, number]}\r\n           * @default offset = [0, 15]\r\n           */\r\n          offset: [0, 15],\r\n          /**\r\n           * @description Text color\r\n           * @type {String}\r\n           * @default color = '#ffdb5c'\r\n           */\r\n          color: '#ffdb5c',\r\n          /**\r\n           * @description Text font size\r\n           * @type {Number}\r\n           * @default fontSize = 12\r\n           */\r\n          fontSize: 12\r\n        },\r\n        /**\r\n         * @description Global icon configuration\r\n         * @type {Icon}\r\n         */\r\n        icon: {\r\n          /**\r\n           * @description Whether to show icon\r\n           * @type {Boolean}\r\n           * @default show = false\r\n           */\r\n          show: false,\r\n          /**\r\n           * @description Icon src\r\n           * @type {String}\r\n           * @default src = ''\r\n           */\r\n          src: '',\r\n          /**\r\n           * @description Icon width\r\n           * @type {Number}\r\n           * @default width = 15\r\n           */\r\n          width: 15,\r\n          /**\r\n           * @description Icon height\r\n           * @type {Number}\r\n           * @default width = 15\r\n           */\r\n          height: 15\r\n        },\r\n        /**\r\n         * @description Global line configuration\r\n         * @type {Line}\r\n         */\r\n        line: {\r\n          /**\r\n           * @description Line width\r\n           * @type {Number}\r\n           * @default width = 1\r\n           */\r\n          width: 1,\r\n          /**\r\n           * @description Flyline color\r\n           * @type {String}\r\n           * @default color = '#ffde93'\r\n           */\r\n          color: '#ffde93',\r\n          /**\r\n           * @description Orbit color\r\n           * @type {String}\r\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\r\n           */\r\n          orbitColor: 'rgba(103, 224, 227, .2)',\r\n          /**\r\n           * @description Flyline animation duration\r\n           * @type {[number, number]}\r\n           * @default duration = [20, 30]\r\n           */\r\n          duration: [20, 30],\r\n          /**\r\n           * @description Flyline radius\r\n           * @type {Number}\r\n           * @default radius = 100\r\n           */\r\n          radius: 100\r\n        },\r\n        /**\r\n         * @description Back ground image url\r\n         * @type {String}\r\n         * @default bgImgSrc = ''\r\n         */\r\n        bgImgSrc: '',\r\n        /**\r\n         * @description K value\r\n         * @type {Number}\r\n         * @default k = -0.5\r\n         * @example k = -1 ~ 1\r\n         */\r\n        k: -0.5,\r\n        /**\r\n         * @description Flyline curvature\r\n         * @type {Number}\r\n         * @default curvature = 5\r\n         */\r\n        curvature: 5,\r\n        /**\r\n         * @description Relative points position\r\n         * @type {Boolean}\r\n         * @default relative = true\r\n         */\r\n        relative: true\r\n      },\r\n      /**\r\n       * @description Fly line data\r\n       * @type {FlylineWithPath[]}\r\n       * @default flylines = []\r\n       */\r\n      flylines: [],\r\n      /**\r\n       * @description Fly line lengths\r\n       * @type {Number[]}\r\n       * @default flylineLengths = []\r\n       */\r\n      flylineLengths: [],\r\n      /**\r\n       * @description Fly line points\r\n       * @default flylinePoints = []\r\n       */\r\n      flylinePoints: [],\r\n\r\n      mergedConfig: null\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    async calcData () {\r\n      const { mergeConfig, calcflylinePoints, calcLinePaths } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcflylinePoints()\r\n\r\n      calcLinePaths()\r\n\r\n      const { calcLineLengths } = this\r\n\r\n      await calcLineLengths()\r\n    },\r\n    mergeConfig () {\r\n      let { config, defaultConfig } = this\r\n\r\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n\r\n      const { points, lines, halo, text, icon, line } = mergedConfig\r\n\r\n      mergedConfig.points = points.map(item => {\r\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {})\r\n        item.text = deepMerge(deepClone(text, true), item.text || {})\r\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {})\r\n\r\n        return item\r\n      })\r\n\r\n      mergedConfig.lines = lines.map(item => {\r\n        return deepMerge(deepClone(line, true), item)\r\n      })\r\n\r\n      this.mergedConfig = mergedConfig\r\n    },\r\n    calcflylinePoints () {\r\n      const { mergedConfig, width, height } = this\r\n\r\n      const { relative, points } = mergedConfig\r\n\r\n      this.flylinePoints = points.map((item, i) => {\r\n        const { coordinate: [x, y], halo, icon, text } = item\r\n\r\n        if (relative) item.coordinate = [x * width, y * height]\r\n\r\n        item.halo.time = randomExtend(...halo.duration) / 10\r\n\r\n        const { width: iw, height: ih } = icon\r\n        item.icon.x = item.coordinate[0] - iw / 2\r\n        item.icon.y = item.coordinate[1] - ih / 2\r\n\r\n        const [ox, oy] = text.offset\r\n        item.text.x = item.coordinate[0] + ox\r\n        item.text.y = item.coordinate[1] + oy\r\n\r\n        item.key = `${item.coordinate.toString()}${i}`\r\n\r\n        return item\r\n      })\r\n    },\r\n    calcLinePaths () {\r\n      const { getPath, mergedConfig } = this\r\n\r\n      const { points, lines } = mergedConfig\r\n\r\n      this.flylines = lines.map(item => {\r\n        const { source, target, duration } = item\r\n\r\n        const sourcePoint = points.find(({ name }) => name === source).coordinate\r\n        const targetPoint = points.find(({ name }) => name === target).coordinate\r\n\r\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))))\r\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\r\n        const key = `path${path.toString()}`\r\n        const time = randomExtend(...duration) / 10\r\n\r\n        return { ...item, path, key, d, time }\r\n      })\r\n    },\r\n    getPath (start, end) {\r\n      const { getControlPoint } = this\r\n\r\n      const controlPoint = getControlPoint(start, end)\r\n\r\n      return [start, controlPoint, end]\r\n    },\r\n    getControlPoint ([sx, sy], [ex, ey]) {\r\n      const { getKLinePointByx, mergedConfig } = this\r\n\r\n      const { curvature, k } = mergedConfig\r\n\r\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\r\n\r\n      const distance = getPointDistance([sx, sy], [ex, ey])\r\n\r\n      const targetLength = distance / curvature\r\n      const disDived = targetLength / 2\r\n\r\n      let [dx, dy] = [mx, my]\r\n\r\n      do {\r\n        dx += disDived\r\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\r\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\r\n\r\n      return [dx, dy]\r\n    },\r\n    getKLinePointByx (k, [lx, ly], x) {\r\n      const y = ly - k * lx + k * x\r\n\r\n      return [x, y]\r\n    },\r\n    async calcLineLengths () {\r\n      const { $nextTick, flylines, $refs } = this\r\n\r\n      await $nextTick()\r\n\r\n      this.flylineLengths = flylines.map(({ key }) => $refs[key][0].getTotalLength())\r\n    },\r\n    consoleClickPos ({ offsetX, offsetY }) {\r\n      const { width, height, dev } = this\r\n\r\n      if (!dev) return\r\n\r\n      const relativeX = (offsetX / width).toFixed(2)\r\n      const relativeY = (offsetY / height).toFixed(2)\r\n\r\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"AAyJA,SAAAA,SAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,YAAA,EAAAC,gBAAA,EAAAC,IAAA;AAEA,OAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAF,UAAA;EACAG,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAC,GAAA;MACAH,IAAA,EAAAI,OAAA;MACAF,OAAA;IACA;EACA;EACAG,KAAA;IACA,MAAAC,EAAA,GAAAZ,IAAA;IACA;MACAa,GAAA;MACAC,MAAA,EAAAC,IAAA,CAAAC,MAAA;MACAC,iBAAA,yBAAAL,EAAA;MACAM,cAAA,sBAAAN,EAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACAO,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,KAAA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAC,IAAA;UACA;AACA;AACA;AACA;UACAC,QAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAJ,IAAA;UACA;AACA;AACA;AACA;AACA;UACAK,MAAA;UACA;AACA;AACA;AACA;AACA;UACAH,KAAA;UACA;AACA;AACA;AACA;AACA;UACAI,QAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAP,IAAA;UACA;AACA;AACA;AACA;AACA;UACAQ,GAAA;UACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}