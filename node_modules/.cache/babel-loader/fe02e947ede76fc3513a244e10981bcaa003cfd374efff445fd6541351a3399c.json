{"ast":null,"code":"import CRender from '@jiaminghi/c-render';\nimport '@jiaminghi/charts/lib/extend/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDigitalFlop',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      renderer: null,\n      defaultConfig: {\n        /**\r\n         * @description Number for digital flop\r\n         * @type {Array<Number>}\r\n         * @default number = []\r\n         * @example number = [10]\r\n         */\n        number: [],\n        /**\r\n         * @description Content formatter\r\n         * @type {String}\r\n         * @default content = ''\r\n         * @example content = '{nt}个'\r\n         */\n        content: '',\n        /**\r\n         * @description Number toFixed\r\n         * @type {Number}\r\n         * @default toFixed = 0\r\n         */\n        toFixed: 0,\n        /**\r\n         * @description Text align\r\n         * @type {String}\r\n         * @default textAlign = 'center'\r\n         * @example textAlign = 'center' | 'left' | 'right'\r\n         */\n        textAlign: 'center',\n        /**\r\n         * @description rowGap\r\n         * @type {Number}\r\n         @default rowGap = 0\r\n         */\n        rowGap: 0,\n        /**\r\n         * @description Text style configuration\r\n         * @type {Object} {CRender Class Style}\r\n         */\n        style: {\n          fontSize: 30,\n          fill: '#3de7c9'\n        },\n        /**\r\n         * @description Number formatter\r\n         * @type {Null|Function}\r\n         */\n        formatter: undefined,\n        /**\r\n         * @description CRender animationCurve\r\n         * @type {String}\r\n         * @default animationCurve = 'easeOutCubic'\r\n         */\n        animationCurve: 'easeOutCubic',\n        /**\r\n         * @description CRender animationFrame\r\n         * @type {String}\r\n         * @default animationFrame = 50\r\n         */\n        animationFrame: 50\n      },\n      mergedConfig: null,\n      graph: null\n    };\n  },\n  watch: {\n    config() {\n      const {\n        update\n      } = this;\n      update();\n    }\n  },\n  methods: {\n    init() {\n      const {\n        initRender,\n        mergeConfig,\n        initGraph\n      } = this;\n      initRender();\n      mergeConfig();\n      initGraph();\n    },\n    initRender() {\n      const {\n        $refs\n      } = this;\n      this.renderer = new CRender($refs['digital-flop']);\n    },\n    mergeConfig() {\n      const {\n        defaultConfig,\n        config\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    initGraph() {\n      const {\n        getShape,\n        getStyle,\n        renderer,\n        mergedConfig\n      } = this;\n      const {\n        animationCurve,\n        animationFrame\n      } = mergedConfig;\n      const shape = getShape();\n      const style = getStyle();\n      this.graph = renderer.add({\n        name: 'numberText',\n        animationCurve,\n        animationFrame,\n        shape,\n        style\n      });\n    },\n    getShape() {\n      const {\n        number,\n        content,\n        toFixed,\n        textAlign,\n        rowGap,\n        formatter\n      } = this.mergedConfig;\n      const [w, h] = this.renderer.area;\n      const position = [w / 2, h / 2];\n      if (textAlign === 'left') position[0] = 0;\n      if (textAlign === 'right') position[0] = w;\n      return {\n        number,\n        content,\n        toFixed,\n        position,\n        rowGap,\n        formatter\n      };\n    },\n    getStyle() {\n      const {\n        style,\n        textAlign\n      } = this.mergedConfig;\n      return deepMerge(style, {\n        textAlign,\n        textBaseline: 'middle'\n      });\n    },\n    update() {\n      const {\n        mergeConfig,\n        mergeShape,\n        getShape,\n        getStyle,\n        graph,\n        mergedConfig\n      } = this;\n      graph.animationEnd();\n      mergeConfig();\n      if (!graph) return;\n      const {\n        animationCurve,\n        animationFrame\n      } = mergedConfig;\n      const shape = getShape();\n      const style = getStyle();\n      mergeShape(graph, shape);\n      graph.animationCurve = animationCurve;\n      graph.animationFrame = animationFrame;\n      graph.animation('style', style, true);\n      graph.animation('shape', shape);\n    },\n    mergeShape(graph, shape) {\n      const cacheNum = graph.shape.number.length;\n      const shapeNum = shape.number.length;\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number;\n    }\n  },\n  mounted() {\n    const {\n      init\n    } = this;\n    init();\n  }\n};","map":{"version":3,"names":["CRender","deepMerge","deepClone","name","props","config","type","Object","default","data","renderer","defaultConfig","number","content","toFixed","textAlign","rowGap","style","fontSize","fill","formatter","undefined","animationCurve","animationFrame","mergedConfig","graph","watch","update","methods","init","initRender","mergeConfig","initGraph","$refs","getShape","getStyle","shape","add","w","h","area","position","textBaseline","mergeShape","animationEnd","animation","cacheNum","length","shapeNum","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/digitalFlop/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-digital-flop\">\r\n    <canvas ref=\"digital-flop\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CRender from '@jiaminghi/c-render'\r\n\r\nimport '@jiaminghi/charts/lib/extend/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvDigitalFlop',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      renderer: null,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Number for digital flop\r\n         * @type {Array<Number>}\r\n         * @default number = []\r\n         * @example number = [10]\r\n         */\r\n        number: [],\r\n        /**\r\n         * @description Content formatter\r\n         * @type {String}\r\n         * @default content = ''\r\n         * @example content = '{nt}个'\r\n         */\r\n        content: '',\r\n        /**\r\n         * @description Number toFixed\r\n         * @type {Number}\r\n         * @default toFixed = 0\r\n         */\r\n        toFixed: 0,\r\n        /**\r\n         * @description Text align\r\n         * @type {String}\r\n         * @default textAlign = 'center'\r\n         * @example textAlign = 'center' | 'left' | 'right'\r\n         */\r\n        textAlign: 'center',\r\n        /**\r\n         * @description rowGap\r\n         * @type {Number}\r\n         @default rowGap = 0\r\n         */\r\n        rowGap: 0,\r\n        /**\r\n         * @description Text style configuration\r\n         * @type {Object} {CRender Class Style}\r\n         */\r\n        style: {\r\n          fontSize: 30,\r\n          fill: '#3de7c9'\r\n        },\r\n        /**\r\n         * @description Number formatter\r\n         * @type {Null|Function}\r\n         */\r\n        formatter: undefined,\r\n        /**\r\n         * @description CRender animationCurve\r\n         * @type {String}\r\n         * @default animationCurve = 'easeOutCubic'\r\n         */\r\n        animationCurve: 'easeOutCubic',\r\n        /**\r\n         * @description CRender animationFrame\r\n         * @type {String}\r\n         * @default animationFrame = 50\r\n         */\r\n        animationFrame: 50\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      graph: null\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { update } = this\r\n\r\n      update()\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      const { initRender, mergeConfig, initGraph } = this\r\n\r\n      initRender()\r\n\r\n      mergeConfig()\r\n\r\n      initGraph()\r\n    },\r\n    initRender () {\r\n      const { $refs } = this\r\n\r\n      this.renderer = new CRender($refs['digital-flop'])\r\n    },\r\n    mergeConfig () {\r\n      const { defaultConfig, config } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    },\r\n    initGraph () {\r\n      const { getShape, getStyle, renderer, mergedConfig } = this\r\n\r\n      const { animationCurve, animationFrame } = mergedConfig\r\n\r\n      const shape = getShape()\r\n      const style = getStyle()\r\n\r\n      this.graph = renderer.add({\r\n        name: 'numberText',\r\n        animationCurve,\r\n        animationFrame,\r\n        shape,\r\n        style\r\n      })\r\n    },\r\n    getShape () {\r\n      const { number, content, toFixed, textAlign, rowGap, formatter } = this.mergedConfig\r\n\r\n      const [w, h] = this.renderer.area\r\n\r\n      const position = [w / 2, h / 2]\r\n\r\n      if (textAlign === 'left') position[0] = 0\r\n      if (textAlign === 'right') position[0] = w\r\n\r\n      return {\r\n        number,\r\n        content,\r\n        toFixed,\r\n        position,\r\n        rowGap,\r\n        formatter\r\n      }\r\n    },\r\n    getStyle () {\r\n      const { style, textAlign } = this.mergedConfig\r\n\r\n      return deepMerge(style, {\r\n        textAlign,\r\n        textBaseline: 'middle'\r\n      })\r\n    },\r\n    update () {\r\n      const { mergeConfig, mergeShape, getShape, getStyle, graph, mergedConfig } = this\r\n\r\n      graph.animationEnd()\r\n\r\n      mergeConfig()\r\n\r\n      if (!graph) return\r\n\r\n      const { animationCurve, animationFrame } = mergedConfig\r\n\r\n      const shape = getShape()\r\n      const style = getStyle()\r\n\r\n      mergeShape(graph, shape)\r\n\r\n      graph.animationCurve = animationCurve\r\n      graph.animationFrame = animationFrame\r\n\r\n      graph.animation('style', style, true)\r\n      graph.animation('shape', shape)\r\n    },\r\n    mergeShape (graph, shape) {\r\n      const cacheNum = graph.shape.number.length\r\n      const shapeNum = shape.number.length\r\n\r\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number\r\n    }\r\n  },\r\n  mounted () {\r\n    const { init } = this\r\n\r\n    init()\r\n  }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}