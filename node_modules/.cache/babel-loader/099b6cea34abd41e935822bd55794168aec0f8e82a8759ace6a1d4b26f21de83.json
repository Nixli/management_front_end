{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nexport default {\n  data() {\n    return {\n      paymentList: [],\n      payment: 0,\n      collectionList: [],\n      collection: 0,\n      currentTime: '',\n      myChart: {},\n      // \n      series: [],\n      payData: [],\n      collectionData: [],\n      profitData: []\n    };\n  },\n  mounted() {\n    // 基于准备好的dom，初始化echarts实例\n    this.myChart = echarts.init(document.getElementById('line'));\n    // 绘制图表\n  },\n  async created() {\n    await Promise.all([this.getProfitData(), this.getCollectionDataList(), this.getPayDataList()]);\n    this.getPaymentList(), this.getCollectionList(), setTimeout(() => {\n      this.series = [{\n        name: '每月收入',\n        type: 'line',\n        data: this.payData\n      }, {\n        name: '每月费用',\n        type: 'line',\n        data: this.collectionData\n      }, {\n        name: '每月利润',\n        type: 'line',\n        data: this.profitData\n      }];\n    }, 2000);\n  },\n  watch: {\n    series: {\n      handler() {\n        this.myChart.setOption({\n          title: {\n            text: '财务分析（近一年）'\n          },\n          legend: {\n            data: ['每月收入', '每月费用', '每月利润']\n          },\n          tooltip: {},\n          xAxis: {\n            type: 'category',\n            boundaryGap: false,\n            // x轴\n            data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n          },\n          yAxis: {},\n          series: this.series\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n    async getProfitData() {\n      // 确保收入和费用数据都已经获取完成\n      for (let i = 0; i < 12; i++) {\n        const collection = this.collectionData[i] || 0;\n        const pay = this.payData[i] || 0;\n        const profit = collection - pay;\n        this.profitData.push(profit);\n      }\n      console.log(this.profitData);\n    },\n    async getCollectionDataList() {\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '收',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n\n      // 获取数据\n      const data = res.data.data.list;\n\n      // 计算每个月份的总金额\n      const payData = {};\n      data.forEach(item => {\n        const month = dayjs(item.cime).format('YYYY-MM');\n        if (!payData[month]) {\n          payData[month] = 0;\n        }\n        payData[month] += parseFloat(item.totalAmount);\n      });\n\n      // 将结果按月份排序并转换为数组\n      const sortedPayData = Object.entries(payData).sort(([month1], [month2]) => month1.localeCompare(month2)).map(([month, total]) => total);\n      this.collectionData = sortedPayData;\n      // console.log(this.collectionData)\n      // console.log(sortedPayData);\n    },\n    async getPayDataList() {\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '付',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n\n      // 获取数据\n      const data = res.data.data.list;\n\n      // 计算每个月份的总金额\n      const payData = {};\n      data.forEach(item => {\n        const month = dayjs(item.cime).format('YYYY-MM');\n        if (!payData[month]) {\n          payData[month] = 0;\n        }\n        payData[month] += parseFloat(item.totalAmount);\n      });\n\n      // 将结果按月份排序并转换为数组\n      const sortedPayData = Object.entries(payData).sort(([month1], [month2]) => month1.localeCompare(month2)).map(([month, total]) => total);\n      this.payData = sortedPayData;\n      // console.log(this.payData)\n      // console.log(sortedPayData);\n    },\n    // 计算应收账款\n    async getPaymentList() {\n      const currentYearMonth = dayjs().format('YYYY-MM');\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '付',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n      // 处理数据：将 cime 格式化为 'YYYY-MM' 的形式\n      this.paymentList = res.data.data.list.map(item => ({\n        ...item,\n        cime: dayjs(item.cime).format('YYYY-MM')\n      }));\n      // console.log(this.paymentList);\n      // 过滤出本月的数据\n      this.paymentList = this.paymentList.filter(item => {\n        // 比较年份月份是否与当前年份月份一致\n        return item.cime === currentYearMonth;\n      });\n      // console.log(currentYearMonth);\n      // console.log(this.paymentList);\n      // 累加每个对象的totalAmount属性\n      let totalPaymentAmount = 0;\n      this.paymentList.forEach(payment => {\n        totalPaymentAmount += parseFloat(payment.totalAmount);\n      });\n      this.payment = totalPaymentAmount;\n      // console.log(this.payment)\n    },\n    // 计算应付账款\n    async getCollectionList() {\n      const currentYearMonth = dayjs().format('YYYY-MM');\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '收',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n      this.collectionList = res.data.data.list.map(item => ({\n        ...item,\n        cime: dayjs(item.cime).format('YYYY-MM')\n      }));\n      // console.log(this.collectionList);\n      this.collectionList = this.collectionList.filter(item => {\n        return item.cime === currentYearMonth;\n      });\n      // console.log(this.collectionList);\n      // 累加每个对象的totalAmount属性\n      let totalPaymentAmount = 0;\n      this.collectionList.forEach(payment => {\n        totalPaymentAmount += parseFloat(payment.totalAmount);\n      });\n      this.collection = totalPaymentAmount;\n    }\n  }\n};","map":{"version":3,"names":["echarts","axios","dayjs","data","paymentList","payment","collectionList","collection","currentTime","myChart","series","payData","collectionData","profitData","mounted","init","document","getElementById","created","Promise","all","getProfitData","getCollectionDataList","getPayDataList","getPaymentList","getCollectionList","setTimeout","name","type","watch","handler","setOption","title","text","legend","tooltip","xAxis","boundaryGap","yAxis","deep","methods","i","pay","profit","push","console","log","res","url","method","params","pageno","pagesize","voucherWord","bookID","localStorage","getItem","list","forEach","item","month","cime","format","parseFloat","totalAmount","sortedPayData","Object","entries","sort","month1","month2","localeCompare","map","total","currentYearMonth","filter","totalPaymentAmount"],"sources":["src/views/home/Home.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- <img src=\"@/assets/收款进度.svg\" /> -->\n    <el-card style=\"margin-right: 30px;\">\n      <div>\n        <span style=\"font-size: 16px; font-family:'Times New Roman', Times, serif;font-weight: bold;\">财务指标</span>\n      </div>\n      <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n        <el-col :span=\"8\">\n          <div class=\"grid-content bg-purple\" style=\"display: flex;text-align: center;justify-content: center;\">\n            <img src=\"@/assets/收款进度.svg\" width=\"25%\" height=\"25%\" style=\"margin-left: 20px; flex:3\">\n            <div style=\"display: flex; flex-direction: column; text-align: center;justify-content: center; flex: 7;\">\n              <span style=\"font-size: 36px;\">{{ collection }}</span>\n              <span style=\"font-size: 16px; margin-top: 10px;\">应收账款</span>\n            </div>\n          </div>\n        </el-col>\n        <el-col :span=\"8\">\n          <div class=\"grid-content bg-purple\" style=\"display: flex;text-align: center;justify-content: center;\">\n            <img src=\"@/assets/付款进度.svg\" width=\"25%\" height=\"25%\" style=\"margin-left: 20px; flex:3\">\n            <div style=\"display: flex; flex-direction: column; text-align: center;justify-content: center; flex: 7;\">\n              <span style=\"font-size: 36px;\">{{ payment }}</span>\n              <span style=\"font-size: 16px; margin-top: 10px;\">应付账款</span>\n            </div>\n          </div>\n        </el-col>\n        <el-col :span=\"8\">\n          <div class=\"grid-content bg-purple\" style=\"display: flex;text-align: center;justify-content: center;\">\n            <img src=\"@/assets/利润分析.svg\" width=\"113px\" height=\"99px\" style=\"margin-left: 20px; flex:3\">\n            <div style=\"display: flex; flex-direction: column; text-align: center;justify-content: center; flex: 7;\">\n              <span style=\"font-size: 36px;\">{{ collection - payment }}</span>\n              <span style=\"font-size: 16px; margin-top: 10px;\">利润总额</span>\n            </div>\n          </div>\n        </el-col>\n      </el-row>\n\n      <div id=\"line\" style=\"width: 1200px; height: 400px; margin-top: 30px;\"></div>\n      {{ currentTime }}\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nexport default {\n  data() {\n    return {\n      paymentList: [],\n      payment: 0,\n      collectionList: [],\n      collection: 0,\n      currentTime: '',\n      myChart: {},\n      // \n      series: [],\n      payData: [],\n      collectionData: [],\n      profitData: [],\n    }\n  },\n  mounted() {\n    // 基于准备好的dom，初始化echarts实例\n    this.myChart = echarts.init(document.getElementById('line'));\n    // 绘制图表\n  },\n  async created() {\n\n    await Promise.all([\n      this.getProfitData(),\n      this.getCollectionDataList(),\n      this.getPayDataList()\n    ]);\n    this.getPaymentList(),\n      this.getCollectionList(),\n      setTimeout(() => {\n        this.series = [\n          {\n            name: '每月收入',\n            type: 'line',\n            data: this.payData\n          },\n          {\n            name: '每月费用',\n            type: 'line',\n            data: this.collectionData\n          },\n          {\n            name: '每月利润',\n            type: 'line',\n            data: this.profitData\n          },\n        ]\n      }, 2000)\n  },\n  watch: {\n    series: {\n      handler() {\n        this.myChart.setOption({\n          title: {\n            text: '财务分析（近一年）'\n          },\n          legend: {\n            data: ['每月收入', '每月费用', '每月利润']\n          },\n          tooltip: {},\n          xAxis: {\n            type: 'category',\n            boundaryGap: false,\n            // x轴\n            data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n          },\n          yAxis: {},\n          series: this.series\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n\n    async getProfitData() {\n      // 确保收入和费用数据都已经获取完成\n      for (let i = 0; i < 12; i++) {\n        const collection = this.collectionData[i] || 0;\n        const pay = this.payData[i] || 0;\n        const profit = collection - pay;\n        this.profitData.push(profit);\n      }\n      console.log(this.profitData);\n    },\n\n\n\n    async getCollectionDataList() {\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '收',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n\n      // 获取数据\n      const data = res.data.data.list;\n\n      // 计算每个月份的总金额\n      const payData = {};\n      data.forEach(item => {\n        const month = dayjs(item.cime).format('YYYY-MM');\n        if (!payData[month]) {\n          payData[month] = 0;\n        }\n        payData[month] += parseFloat(item.totalAmount);\n      });\n\n      // 将结果按月份排序并转换为数组\n      const sortedPayData = Object.entries(payData)\n        .sort(([month1], [month2]) => month1.localeCompare(month2))\n        .map(([month, total]) => total);\n      this.collectionData = sortedPayData;\n      // console.log(this.collectionData)\n      // console.log(sortedPayData);\n    },\n\n    async getPayDataList() {\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '付',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n\n      // 获取数据\n      const data = res.data.data.list;\n\n      // 计算每个月份的总金额\n      const payData = {};\n      data.forEach(item => {\n        const month = dayjs(item.cime).format('YYYY-MM');\n        if (!payData[month]) {\n          payData[month] = 0;\n        }\n        payData[month] += parseFloat(item.totalAmount);\n      });\n\n      // 将结果按月份排序并转换为数组\n      const sortedPayData = Object.entries(payData)\n        .sort(([month1], [month2]) => month1.localeCompare(month2))\n        .map(([month, total]) => total);\n      this.payData = sortedPayData;\n      // console.log(this.payData)\n      // console.log(sortedPayData);\n    },\n\n    // 计算应收账款\n    async getPaymentList() {\n      const currentYearMonth = dayjs().format('YYYY-MM');\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '付',\n          bookID: localStorage.getItem('bookID')\n        }\n      });\n      // 处理数据：将 cime 格式化为 'YYYY-MM' 的形式\n      this.paymentList = res.data.data.list.map(item => ({\n        ...item,\n        cime: dayjs(item.cime).format('YYYY-MM')\n      }));\n      // console.log(this.paymentList);\n      // 过滤出本月的数据\n      this.paymentList = this.paymentList.filter(item => {\n        // 比较年份月份是否与当前年份月份一致\n        return item.cime === currentYearMonth;\n      });\n      // console.log(currentYearMonth);\n      // console.log(this.paymentList);\n      // 累加每个对象的totalAmount属性\n      let totalPaymentAmount = 0;\n      this.paymentList.forEach(payment => {\n        totalPaymentAmount += parseFloat(payment.totalAmount);\n      });\n      this.payment = totalPaymentAmount;\n      // console.log(this.payment)\n    },\n\n    // 计算应付账款\n    async getCollectionList() {\n      const currentYearMonth = dayjs().format('YYYY-MM');\n      const res = await axios({\n        url: '/voucher',\n        method: 'get',\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          voucherWord: '收',\n          bookID: localStorage.getItem('bookID')\n        }\n      })\n      this.collectionList = res.data.data.list.map(item => ({\n        ...item,\n        cime: dayjs(item.cime).format('YYYY-MM')\n      }));\n      // console.log(this.collectionList);\n      this.collectionList = this.collectionList.filter(item => {\n        return item.cime === currentYearMonth;\n      })\n      // console.log(this.collectionList);\n      // 累加每个对象的totalAmount属性\n      let totalPaymentAmount = 0;\n      this.collectionList.forEach(payment => {\n        totalPaymentAmount += parseFloat(payment.totalAmount);\n      });\n      this.collection = totalPaymentAmount;\n    }\n\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-row {\n  margin-bottom: 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.el-col {\n  border-radius: 4px;\n}\n\n.bg-purple-dark {\n  background: #99a9bf;\n}\n\n.bg-purple {\n  background: rgb(249, 249, 249);\n}\n\n.bg-purple-light {\n  background: #e5e9f2;\n}\n\n.grid-content {\n  border-radius: 4px;\n  min-height: 36px;\n}\n\n.row-bg {\n  padding: 10px 0;\n  background-color: #f9fafc;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}