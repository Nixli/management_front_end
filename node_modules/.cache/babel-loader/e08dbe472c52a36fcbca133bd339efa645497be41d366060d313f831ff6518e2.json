{"ast":null,"code":"import { menuRoutes } from '@/router/index';\nimport { Icon } from 'element-ui';\nexport default {\n  data() {\n    return {\n      // isopen为true代表展开   isopen为false代表关闭\n      // collapse为true代表收起  false代表展开\n      res: true,\n      isopen: true,\n      // 当前定位项\n      curIndex: '',\n      menuRoutes,\n      role: localStorage.getItem('role')\n    };\n  },\n  methods: {\n    handelWindowResize() {\n      // 得到尺寸\n      let width = document.body.offsetWidth;\n      if (width < 800) this.isopen = false;else this.isopen = true;\n    }\n  },\n  created() {\n    // 执行一次\n    // this.curIndex = this.$route.path\n  },\n  // 在某一个生命周期中\n  mounted() {\n    // 页面加载完，不管窗口有没有发生变化，都要计算一次\n    this.handelWindowResize();\n    // 1. 监听窗口尺寸变化\n    window.addEventListener('resize', this.handelWindowResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handelWindowResize);\n  },\n  computed: {\n    activeMenuRoutes() {\n      let role = localStorage.getItem('role');\n      if (role) {\n        return this.menuRoutes.filter(item => {\n          return (item.meta.role || []).includes(role);\n        });\n      } else {\n        return this.menuRoutes;\n      }\n    },\n    // 1. 因为页面中用到了comCurIndex，所以一进页面计算属性会计算一次，然后把计算之后的值给comCurIndex\n    // 2. 每次页面的切换，$route都发生变化，计算属性都会重新执行\n    comCurIndex() {\n      return this.$route.path;\n    }\n  },\n  watch: {\n    // 一进页面执行一次$route的监听事件\n    // $route: function(newVal, oldVal) {\n    //   console.log('地址发生变化了')\n    //   console.log(newVal.path)\n    //   this.curIndex = newVal.path\n    // }\n    $route: {\n      handler: function (route) {\n        this.curIndex = route.path;\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  components: {\n    Icon\n  }\n};","map":{"version":3,"names":["menuRoutes","Icon","data","res","isopen","curIndex","role","localStorage","getItem","methods","handelWindowResize","width","document","body","offsetWidth","created","mounted","window","addEventListener","beforeDestroy","removeEventListener","computed","activeMenuRoutes","filter","item","meta","includes","comCurIndex","$route","path","watch","handler","route","deep","immediate","components"],"sources":["src/layout/components/AppAside.vue"],"sourcesContent":["<template>\n  <aside :style=\"{ width: '200px' }\">\n    <!-- <el-switch v-model=\"res\" active-color=\"#13ce66\" inactive-color=\"#ff4949\">\n    </el-switch> -->\n\n    <el-row class=\"block-col-2\">\n      <el-col :span=\"12\">\n        <el-dropdown trigger=\"click\">\n          <span class=\"el-dropdown-link\">\n            账套切换<i class=\"el-icon-arrow-down\"></i>\n          </span>\n          <el-dropdown-menu slot=\"dropdown\">\n            <el-dropdown-item>账套1</el-dropdown-item>\n            <el-dropdown-item>账套2</el-dropdown-item>\n            <el-dropdown-item>账套3</el-dropdown-item>\n          </el-dropdown-menu>\n        </el-dropdown>\n      </el-col>\n    </el-row>\n    <el-menu :default-active=\"comCurIndex\" router background-color=\"#304156\" :collapse=\"!isopen\">\n      <!-- 插槽 -->\n      <template v-for=\"route in activeMenuRoutes\">\n\n\n        <!-- 当route只有一个孩子的时候 -->\n        <el-menu-item v-if=\"route.children.length === 1\" :key=\"route.path\" :index=\"route.path\">\n          <i :class=\"route.meta.icon || 'el-icon-menu'\"></i>\n          <span slot=\"title\">{{ route.meta.title }}</span>\n        </el-menu-item>\n\n        <!-- 当route的孩子大于1 -->\n        <el-submenu v-else :key=\"route.path\" :index=\"route.path\">\n          <template slot=\"title\">\n            <i :class=\"route.meta.icon || 'el-icon-location'\"></i>\n            <span>{{ route.meta.title }}</span>\n          </template>\n          <el-menu-item v-for=\"child in route.children\" :key=\"child.path\" :index=\"child.path\">{{ child.meta.title\n          }}</el-menu-item>\n        </el-submenu>\n      </template>\n    </el-menu>\n\n  </aside>\n</template>\n\n<script>\nimport { menuRoutes } from '@/router/index'\nimport { Icon } from 'element-ui'\nexport default {\n  data() {\n    return {\n      // isopen为true代表展开   isopen为false代表关闭\n      // collapse为true代表收起  false代表展开\n      res: true,\n      isopen: true,\n      // 当前定位项\n      curIndex: '',\n      menuRoutes,\n      role: localStorage.getItem('role')\n    };\n  },\n  methods: {\n    handelWindowResize() {\n      // 得到尺寸\n      let width = document.body.offsetWidth;\n      if (width < 800)\n        this.isopen = false;\n      else\n        this.isopen = true;\n    }\n  },\n  created() {\n    // 执行一次\n    // this.curIndex = this.$route.path\n  },\n  // 在某一个生命周期中\n  mounted() {\n    // 页面加载完，不管窗口有没有发生变化，都要计算一次\n    this.handelWindowResize();\n    // 1. 监听窗口尺寸变化\n    window.addEventListener('resize', this.handelWindowResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handelWindowResize);\n  },\n  computed: {\n    activeMenuRoutes() {\n      let role = localStorage.getItem('role');\n      if (role) {\n        return this.menuRoutes.filter(item => {\n          return (item.meta.role || []).includes(role);\n        });\n      }\n      else {\n        return this.menuRoutes;\n      }\n    },\n    // 1. 因为页面中用到了comCurIndex，所以一进页面计算属性会计算一次，然后把计算之后的值给comCurIndex\n    // 2. 每次页面的切换，$route都发生变化，计算属性都会重新执行\n    comCurIndex() {\n      return this.$route.path;\n    }\n  },\n  watch: {\n    // 一进页面执行一次$route的监听事件\n    // $route: function(newVal, oldVal) {\n    //   console.log('地址发生变化了')\n    //   console.log(newVal.path)\n    //   this.curIndex = newVal.path\n    // }\n    $route: {\n      handler: function (route) {\n        this.curIndex = route.path;\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  components: { Icon }\n}\n</script>\n\n<style lang=\"scss\" scoped>\naside {\n  color: #fff;\n  width: 200px;\n  background-color: #304156;\n  transition: all .5s;\n  height: 100vh;\n  overflow-y: scroll;\n\n  .el-menu {\n    border-right: none;\n  }\n\n  .el-switch {\n    margin-left: 20px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  .el-menu-item {\n    color: #fff;\n  }\n\n  .switch-wrapper {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n\n  // 如果element的一些样式覆盖不了，你就在其前面加上 /deep/\n  ::v-deep .el-submenu__title {\n    color: #fff;\n  }\n\n  ::v-deep .el-menu-item.is-active {\n    color: #409EFF;\n  }\n\n  .el-dropdown-link {\n    cursor: pointer;\n    color: #409EFF;\n    font-size: 18px;\n  }\n\n  .el-icon-arrow-down {\n    font-size: 18px;\n  }\n\n  .demonstration {\n    display: block;\n    color: #8492a6;\n    font-size: 14px;\n    margin-bottom: 20px;\n  }\n\n  .block-col-2 {\n    width: auto;\n    height: 50px;\n    display: flex;\n    justify-content: center;\n    text-align: center;\n  }\n  .el-dropdown {\n    display: inline-block;\n    position: relative;\n    color: #606266;\n    font-size: 14px;\n    width: 100%;\n    height: 100%; \n    display: flex; \n    flex-direction: row;\n}\n}\n</style>"],"mappings":"AA8CA,SAAAA,UAAA;AACA,SAAAC,IAAA;AACA;EACAC,KAAA;IACA;MACA;MACA;MACAC,GAAA;MACAC,MAAA;MACA;MACAC,QAAA;MACAL,UAAA;MACAM,IAAA,EAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,mBAAA;MACA;MACA,IAAAC,KAAA,GAAAC,QAAA,CAAAC,IAAA,CAAAC,WAAA;MACA,IAAAH,KAAA,QACA,KAAAP,MAAA,cAEA,KAAAA,MAAA;IACA;EACA;EACAW,QAAA;IACA;IACA;EAAA,CACA;EACA;EACAC,QAAA;IACA;IACA,KAAAN,kBAAA;IACA;IACAO,MAAA,CAAAC,gBAAA,gBAAAR,kBAAA;EACA;EACAS,cAAA;IACAF,MAAA,CAAAG,mBAAA,gBAAAV,kBAAA;EACA;EACAW,QAAA;IACAC,iBAAA;MACA,IAAAhB,IAAA,GAAAC,YAAA,CAAAC,OAAA;MACA,IAAAF,IAAA;QACA,YAAAN,UAAA,CAAAuB,MAAA,CAAAC,IAAA;UACA,QAAAA,IAAA,CAAAC,IAAA,CAAAnB,IAAA,QAAAoB,QAAA,CAAApB,IAAA;QACA;MACA,OACA;QACA,YAAAN,UAAA;MACA;IACA;IACA;IACA;IACA2B,YAAA;MACA,YAAAC,MAAA,CAAAC,IAAA;IACA;EACA;EACAC,KAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACAF,MAAA;MACAG,OAAA,WAAAA,CAAAC,KAAA;QACA,KAAA3B,QAAA,GAAA2B,KAAA,CAAAH,IAAA;MACA;MACAI,IAAA;MACAC,SAAA;IACA;EACA;EACAC,UAAA;IAAAlC;EAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}