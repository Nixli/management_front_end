{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index';\nimport autoResize from '../../../mixin/autoResize';\nexport default {\n  name: 'DvFlylineChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    const id = uuid();\n    return {\n      ref: 'dv-flyline-chart',\n      unique: Math.random(),\n      maskId: `flyline-mask-id-${id}`,\n      maskCircleId: `mask-circle-id-${id}`,\n      gradientId: `gradient-id-${id}`,\n      gradient2Id: `gradient2-id-${id}`,\n      defaultConfig: {\n        /**\r\n         * @description Flyline chart center point\r\n         * @type {Array<Number>}\r\n         * @default centerPoint = [0, 0]\r\n         */\n        centerPoint: [0, 0],\n        /**\r\n         * @description Flyline start points\r\n         * @type {Array<Array<Number>>}\r\n         * @default points = []\r\n         * @example points = [[10, 10], [100, 100]]\r\n         */\n        points: [],\n        /**\r\n         * @description Flyline width\r\n         * @type {Number}\r\n         * @default lineWidth = 1\r\n         */\n        lineWidth: 1,\n        /**\r\n         * @description Orbit color\r\n         * @type {String}\r\n         * @default orbitColor = 'rgba(103, 224, 227, .2)'\r\n         */\n        orbitColor: 'rgba(103, 224, 227, .2)',\n        /**\r\n         * @description Flyline color\r\n         * @type {String}\r\n         * @default orbitColor = '#ffde93'\r\n         */\n        flylineColor: '#ffde93',\n        /**\r\n         * @description K value\r\n         * @type {Number}\r\n         * @default k = -0.5\r\n         * @example k = -1 ~ 1\r\n         */\n        k: -0.5,\n        /**\r\n         * @description Flyline curvature\r\n         * @type {Number}\r\n         * @default curvature = 5\r\n         */\n        curvature: 5,\n        /**\r\n         * @description Flyline radius\r\n         * @type {Number}\r\n         * @default flylineRadius = 100\r\n         */\n        flylineRadius: 100,\n        /**\r\n         * @description Flyline animation duration\r\n         * @type {Array<Number>}\r\n         * @default duration = [20, 30]\r\n         */\n        duration: [20, 30],\n        /**\r\n         * @description Relative points position\r\n         * @type {Boolean}\r\n         * @default relative = true\r\n         */\n        relative: true,\n        /**\r\n         * @description Back ground image url\r\n         * @type {String}\r\n         * @default bgImgUrl = ''\r\n         * @example bgImgUrl = './img/bg.jpg'\r\n         */\n        bgImgUrl: '',\n        /**\r\n         * @description Text configuration\r\n         * @type {Object}\r\n         */\n        text: {\n          /**\r\n           * @description Text offset\r\n           * @type {Array<Number>}\r\n           * @default offset = [0, 15]\r\n           */\n          offset: [0, 15],\n          /**\r\n           * @description Text color\r\n           * @type {String}\r\n           * @default color = '#ffdb5c'\r\n           */\n          color: '#ffdb5c',\n          /**\r\n           * @description Text font size\r\n           * @type {Number}\r\n           * @default fontSize = 12\r\n           */\n          fontSize: 12\n        },\n        /**\r\n         * @description Halo configuration\r\n         * @type {Object}\r\n         */\n        halo: {\n          /**\r\n           * @description Weather to show halo\r\n           * @type {Boolean}\r\n           * @default show = true\r\n           * @example show = true | false\r\n           */\n          show: true,\n          /**\r\n           * @description Halo animation duration (10 = 1s)\r\n           * @type {Number}\r\n           * @default duration = 30\r\n           */\n          duration: 30,\n          /**\r\n           * @description Halo color\r\n           * @type {String}\r\n           * @default color = '#fb7293'\r\n           */\n          color: '#fb7293',\n          /**\r\n           * @description Halo max radius\r\n           * @type {Number}\r\n           * @default radius = 120\r\n           */\n          radius: 120\n        },\n        /**\r\n         * @description Center point img configuration\r\n         * @type {Object}\r\n         */\n        centerPointImg: {\n          /**\r\n           * @description Center point img width\r\n           * @type {Number}\r\n           * @default width = 40\r\n           */\n          width: 40,\n          /**\r\n           * @description Center point img height\r\n           * @type {Number}\r\n           * @default height = 40\r\n           */\n          height: 40,\n          /**\r\n           * @description Center point img url\r\n           * @type {String}\r\n           * @default url = ''\r\n           */\n          url: ''\n        },\n        /**\r\n         * @description Points img configuration\r\n         * @type {Object}\r\n         * @default radius = 120\r\n         */\n        pointsImg: {\n          /**\r\n           * @description Points img width\r\n           * @type {Number}\r\n           * @default width = 15\r\n           */\n          width: 15,\n          /**\r\n           * @description Points img height\r\n           * @type {Number}\r\n           * @default height = 15\r\n           */\n          height: 15,\n          /**\r\n           * @description Points img url\r\n           * @type {String}\r\n           * @default url = ''\r\n           */\n          url: ''\n        }\n      },\n      mergedConfig: null,\n      paths: [],\n      lengths: [],\n      times: [],\n      texts: []\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    async calcData() {\n      const {\n        mergeConfig,\n        createFlylinePaths,\n        calcLineLengths\n      } = this;\n      mergeConfig();\n      createFlylinePaths();\n      await calcLineLengths();\n      const {\n        calcTimes,\n        calcTexts\n      } = this;\n      calcTimes();\n      calcTexts();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n      const {\n        points\n      } = mergedConfig;\n      mergedConfig.points = points.map(item => {\n        if (item instanceof Array) {\n          return {\n            position: item,\n            text: ''\n          };\n        }\n        return item;\n      });\n      this.mergedConfig = mergedConfig;\n    },\n    createFlylinePaths() {\n      const {\n        getPath,\n        mergedConfig,\n        width,\n        height\n      } = this;\n      let {\n        centerPoint,\n        points,\n        relative\n      } = mergedConfig;\n      points = points.map(({\n        position\n      }) => position);\n      if (relative) {\n        centerPoint = [width * centerPoint[0], height * centerPoint[1]];\n        points = points.map(([x, y]) => [width * x, height * y]);\n      }\n      this.paths = points.map(point => getPath(centerPoint, point));\n    },\n    getPath(center, point) {\n      const {\n        getControlPoint\n      } = this;\n      const controlPoint = getControlPoint(center, point);\n      return [point, controlPoint, center];\n    },\n    getControlPoint([sx, sy], [ex, ey]) {\n      const {\n        getKLinePointByx,\n        mergedConfig\n      } = this;\n      const {\n        curvature,\n        k\n      } = mergedConfig;\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2];\n      const distance = getPointDistance([sx, sy], [ex, ey]);\n      const targetLength = distance / curvature;\n      const disDived = targetLength / 2;\n      let [dx, dy] = [mx, my];\n      do {\n        dx += disDived;\n        dy = getKLinePointByx(k, [mx, my], dx)[1];\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength);\n      return [dx, dy];\n    },\n    getKLinePointByx(k, [lx, ly], x) {\n      const y = ly - k * lx + k * x;\n      return [x, y];\n    },\n    async calcLineLengths() {\n      const {\n        $nextTick,\n        paths,\n        $refs\n      } = this;\n      await $nextTick();\n      this.lengths = paths.map((foo, i) => $refs[`path${i}`][0].getTotalLength());\n    },\n    calcTimes() {\n      const {\n        duration,\n        points\n      } = this.mergedConfig;\n      this.times = points.map(foo => randomExtend(...duration) / 10);\n    },\n    calcTexts() {\n      const {\n        points\n      } = this.mergedConfig;\n      this.texts = points.map(({\n        text\n      }) => text);\n    },\n    consoleClickPos({\n      offsetX,\n      offsetY\n    }) {\n      const {\n        width,\n        height,\n        dev\n      } = this;\n      if (!dev) return;\n      const relativeX = (offsetX / width).toFixed(2);\n      const relativeY = (offsetY / height).toFixed(2);\n      console.warn(`dv-flyline-chart DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`);\n    }\n  }\n};","map":{"version":3,"names":["deepMerge","deepClone","randomExtend","getPointDistance","uuid","autoResize","name","mixins","props","config","type","Object","default","dev","Boolean","data","id","ref","unique","Math","random","maskId","maskCircleId","gradientId","gradient2Id","defaultConfig","centerPoint","points","lineWidth","orbitColor","flylineColor","k","curvature","flylineRadius","duration","relative","bgImgUrl","text","offset","color","fontSize","halo","show","radius","centerPointImg","width","height","url","pointsImg","mergedConfig","paths","lengths","times","texts","watch","calcData","methods","afterAutoResizeMixinInit","onResize","mergeConfig","createFlylinePaths","calcLineLengths","calcTimes","calcTexts","map","item","Array","position","getPath","x","y","point","center","getControlPoint","controlPoint","sx","sy","ex","ey","getKLinePointByx","mx","my","distance","targetLength","disDived","dx","dy","lx","ly","$nextTick","$refs","foo","i","getTotalLength","consoleClickPos","offsetX","offsetY","relativeX","toFixed","relativeY","console","warn"],"sources":["node_modules/@jiaminghi/data-view/lib/components/flylineChart/src/main.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"dv-flyline-chart\"\r\n    ref=\"dv-flyline-chart\"\r\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgUrl : ''})`\"\r\n    @click=\"consoleClickPos\"\r\n  >\r\n    <svg v-if=\"mergedConfig\" :width=\"width\" :height=\"height\">\r\n      <defs>\r\n        <radialGradient\r\n          :id=\"gradientId\"\r\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\r\n        >\r\n          <stop\r\n            offset=\"0%\" stop-color=\"#fff\"\r\n            stop-opacity=\"1\"\r\n          />\r\n          <stop\r\n            offset=\"100%\" stop-color=\"#fff\"\r\n            stop-opacity=\"0\"\r\n          />\r\n        </radialGradient>\r\n\r\n        <radialGradient\r\n          :id=\"gradient2Id\"\r\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\r\n        >\r\n          <stop\r\n            offset=\"0%\" stop-color=\"#fff\"\r\n            stop-opacity=\"0\"\r\n          />\r\n          <stop\r\n            offset=\"100%\" stop-color=\"#fff\"\r\n            stop-opacity=\"1\"\r\n          />\r\n        </radialGradient>\r\n\r\n        <circle\r\n          v-if=\"paths[0]\"\r\n          :id=\"`circle${paths[0].toString()}`\"\r\n          :cx=\"paths[0][2][0]\"\r\n          :cy=\"paths[0][2][1]\"\r\n        >\r\n          <animate\r\n            attributeName=\"r\"\r\n            :values=\"`1;${mergedConfig.halo.radius}`\"\r\n            :dur=\"mergedConfig.halo.duration / 10 + 's'\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n          <animate\r\n            attributeName=\"opacity\"\r\n            values=\"1;0\"\r\n            :dur=\"mergedConfig.halo.duration / 10 + 's'\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </circle>\r\n      </defs>\r\n\r\n      <image\r\n        v-if=\"paths[0]\"\r\n        :xlink:href=\"mergedConfig.centerPointImg.url\"\r\n        :width=\"mergedConfig.centerPointImg.width\"\r\n        :height=\"mergedConfig.centerPointImg.height\"\r\n        :x=\"paths[0][2][0] - mergedConfig.centerPointImg.width / 2\"\r\n        :y=\"paths[0][2][1] - mergedConfig.centerPointImg.height / 2\"\r\n      />\r\n\r\n      <mask :id=\"`maskhalo${paths[0].toString()}`\">\r\n        <use\r\n          v-if=\"paths[0]\"\r\n          :xlink:href=\"`#circle${paths[0].toString()}`\"\r\n          :fill=\"`url(#${gradient2Id})`\"\r\n        />\r\n      </mask>\r\n\r\n      <use\r\n        v-if=\"paths[0] && mergedConfig.halo.show\"\r\n        :xlink:href=\"`#circle${paths[0].toString()}`\"\r\n        :fill=\"mergedConfig.halo.color\"\r\n        :mask=\"`url(#maskhalo${paths[0].toString()})`\"\r\n      />\r\n\r\n      <g\r\n        v-for=\"(path, i) in paths\"\r\n        :key=\"i\"\r\n      >\r\n        <defs>\r\n          <path\r\n            :id=\"`path${path.toString()}`\"\r\n            :ref=\"`path${i}`\"\r\n            :d=\"`M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\"\r\n            fill=\"transparent\"\r\n          />\r\n        </defs>\r\n\r\n        <use\r\n          :xlink:href=\"`#path${path.toString()}`\"\r\n          :stroke-width=\"mergedConfig.lineWidth\"\r\n          :stroke=\"mergedConfig.orbitColor\"\r\n        />\r\n\r\n        <use\r\n          v-if=\"lengths[i]\"\r\n          :xlink:href=\"`#path${path.toString()}`\"\r\n          :stroke-width=\"mergedConfig.lineWidth\"\r\n          :stroke=\"mergedConfig.flylineColor\"\r\n          :mask=\"`url(#mask${unique}${path.toString()})`\"\r\n        >\r\n          <animate\r\n            attributeName=\"stroke-dasharray\"\r\n            :from=\"`0, ${lengths[i]}`\"\r\n            :to=\"`${lengths[i]}, 0`\"\r\n            :dur=\"times[i] || 0\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </use>\r\n\r\n        <mask :id=\"`mask${unique}${path.toString()}`\">\r\n          <circle cx=\"0\" cy=\"0\" :r=\"mergedConfig.flylineRadius\" :fill=\"`url(#${gradientId})`\">\r\n            <animateMotion\r\n              :dur=\"times[i] || 0\"\r\n              :path=\"`M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\"\r\n              rotate=\"auto\"\r\n              repeatCount=\"indefinite\"\r\n            />\r\n          </circle>\r\n        </mask>\r\n\r\n        <image\r\n          :xlink:href=\"mergedConfig.pointsImg.url\"\r\n          :width=\"mergedConfig.pointsImg.width\"\r\n          :height=\"mergedConfig.pointsImg.height\"\r\n          :x=\"path[0][0] - mergedConfig.pointsImg.width / 2\"\r\n          :y=\"path[0][1] - mergedConfig.pointsImg.height / 2\"\r\n        />\r\n\r\n        <text\r\n          :style=\"`fontSize:${mergedConfig.text.fontSize}px;`\"\r\n          :fill=\"mergedConfig.text.color\"\r\n          :x=\"path[0][0] + mergedConfig.text.offset[0]\"\r\n          :y=\"path[0][1] + mergedConfig.text.offset[1]\"\r\n        >\r\n          {{ texts[i] }}\r\n        </text>\r\n\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\r\n\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nexport default {\r\n  name: 'DvFlylineChart',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    dev: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      ref: 'dv-flyline-chart',\r\n      unique: Math.random(),\r\n      maskId: `flyline-mask-id-${id}`,\r\n      maskCircleId: `mask-circle-id-${id}`,\r\n      gradientId: `gradient-id-${id}`,\r\n      gradient2Id: `gradient2-id-${id}`,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Flyline chart center point\r\n         * @type {Array<Number>}\r\n         * @default centerPoint = [0, 0]\r\n         */\r\n        centerPoint: [0, 0],\r\n        /**\r\n         * @description Flyline start points\r\n         * @type {Array<Array<Number>>}\r\n         * @default points = []\r\n         * @example points = [[10, 10], [100, 100]]\r\n         */\r\n        points: [],\r\n        /**\r\n         * @description Flyline width\r\n         * @type {Number}\r\n         * @default lineWidth = 1\r\n         */\r\n        lineWidth: 1,\r\n        /**\r\n         * @description Orbit color\r\n         * @type {String}\r\n         * @default orbitColor = 'rgba(103, 224, 227, .2)'\r\n         */\r\n        orbitColor: 'rgba(103, 224, 227, .2)',\r\n        /**\r\n         * @description Flyline color\r\n         * @type {String}\r\n         * @default orbitColor = '#ffde93'\r\n         */\r\n        flylineColor: '#ffde93',\r\n        /**\r\n         * @description K value\r\n         * @type {Number}\r\n         * @default k = -0.5\r\n         * @example k = -1 ~ 1\r\n         */\r\n        k: -0.5,\r\n        /**\r\n         * @description Flyline curvature\r\n         * @type {Number}\r\n         * @default curvature = 5\r\n         */\r\n        curvature: 5,\r\n        /**\r\n         * @description Flyline radius\r\n         * @type {Number}\r\n         * @default flylineRadius = 100\r\n         */\r\n        flylineRadius: 100,\r\n        /**\r\n         * @description Flyline animation duration\r\n         * @type {Array<Number>}\r\n         * @default duration = [20, 30]\r\n         */\r\n        duration: [20, 30],\r\n        /**\r\n         * @description Relative points position\r\n         * @type {Boolean}\r\n         * @default relative = true\r\n         */\r\n        relative: true,\r\n        /**\r\n         * @description Back ground image url\r\n         * @type {String}\r\n         * @default bgImgUrl = ''\r\n         * @example bgImgUrl = './img/bg.jpg'\r\n         */\r\n        bgImgUrl: '',\r\n        /**\r\n         * @description Text configuration\r\n         * @type {Object}\r\n         */\r\n        text: {\r\n          /**\r\n           * @description Text offset\r\n           * @type {Array<Number>}\r\n           * @default offset = [0, 15]\r\n           */\r\n          offset: [0, 15],\r\n          /**\r\n           * @description Text color\r\n           * @type {String}\r\n           * @default color = '#ffdb5c'\r\n           */\r\n          color: '#ffdb5c',\r\n          /**\r\n           * @description Text font size\r\n           * @type {Number}\r\n           * @default fontSize = 12\r\n           */\r\n          fontSize: 12\r\n        },\r\n        /**\r\n         * @description Halo configuration\r\n         * @type {Object}\r\n         */\r\n        halo: {\r\n          /**\r\n           * @description Weather to show halo\r\n           * @type {Boolean}\r\n           * @default show = true\r\n           * @example show = true | false\r\n           */\r\n          show: true,\r\n          /**\r\n           * @description Halo animation duration (10 = 1s)\r\n           * @type {Number}\r\n           * @default duration = 30\r\n           */\r\n          duration: 30,\r\n          /**\r\n           * @description Halo color\r\n           * @type {String}\r\n           * @default color = '#fb7293'\r\n           */\r\n          color: '#fb7293',\r\n          /**\r\n           * @description Halo max radius\r\n           * @type {Number}\r\n           * @default radius = 120\r\n           */\r\n          radius: 120\r\n        },\r\n        /**\r\n         * @description Center point img configuration\r\n         * @type {Object}\r\n         */\r\n        centerPointImg: {\r\n          /**\r\n           * @description Center point img width\r\n           * @type {Number}\r\n           * @default width = 40\r\n           */\r\n          width: 40,\r\n          /**\r\n           * @description Center point img height\r\n           * @type {Number}\r\n           * @default height = 40\r\n           */\r\n          height: 40,\r\n          /**\r\n           * @description Center point img url\r\n           * @type {String}\r\n           * @default url = ''\r\n           */\r\n          url: ''\r\n        },\r\n        /**\r\n         * @description Points img configuration\r\n         * @type {Object}\r\n         * @default radius = 120\r\n         */\r\n        pointsImg: {\r\n          /**\r\n           * @description Points img width\r\n           * @type {Number}\r\n           * @default width = 15\r\n           */\r\n          width: 15,\r\n          /**\r\n           * @description Points img height\r\n           * @type {Number}\r\n           * @default height = 15\r\n           */\r\n          height: 15,\r\n          /**\r\n           * @description Points img url\r\n           * @type {String}\r\n           * @default url = ''\r\n           */\r\n          url: ''\r\n        }\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      paths: [],\r\n      lengths: [],\r\n      times: [],\r\n      texts: []\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    async calcData () {\r\n      const { mergeConfig, createFlylinePaths, calcLineLengths } = this\r\n\r\n      mergeConfig()\r\n\r\n      createFlylinePaths()\r\n\r\n      await calcLineLengths()\r\n\r\n      const { calcTimes, calcTexts } = this\r\n\r\n      calcTimes()\r\n\r\n      calcTexts()\r\n    },\r\n    mergeConfig () {\r\n      let { config, defaultConfig } = this\r\n\r\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n\r\n      const { points } = mergedConfig\r\n\r\n      mergedConfig.points = points.map(item => {\r\n        if (item instanceof Array) {\r\n          return { position: item, text: '' }\r\n        }\r\n\r\n        return item\r\n      })\r\n\r\n      this.mergedConfig = mergedConfig\r\n    },\r\n    createFlylinePaths () {\r\n      const { getPath, mergedConfig, width, height } = this\r\n\r\n      let { centerPoint, points, relative } = mergedConfig\r\n\r\n      points = points.map(({ position }) => position)\r\n\r\n      if (relative) {\r\n        centerPoint = [width * centerPoint[0], height * centerPoint[1]]\r\n        points = points.map(([x, y]) => [width * x, height * y])\r\n      }\r\n\r\n      this.paths = points.map(point => getPath(centerPoint, point))\r\n    },\r\n    getPath (center, point) {\r\n      const { getControlPoint } = this\r\n\r\n      const controlPoint = getControlPoint(center, point)\r\n\r\n      return [point, controlPoint, center]\r\n    },\r\n    getControlPoint ([sx, sy], [ex, ey]) {\r\n      const { getKLinePointByx, mergedConfig } = this\r\n\r\n      const { curvature, k } = mergedConfig\r\n\r\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\r\n\r\n      const distance = getPointDistance([sx, sy], [ex, ey])\r\n\r\n      const targetLength = distance / curvature\r\n      const disDived = targetLength / 2\r\n\r\n      let [dx, dy] = [mx, my]\r\n\r\n      do {\r\n        dx += disDived\r\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\r\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\r\n\r\n      return [dx, dy]\r\n    },\r\n    getKLinePointByx (k, [lx, ly], x) {\r\n      const y = ly - k * lx + k * x\r\n\r\n      return [x, y]\r\n    },\r\n    async calcLineLengths () {\r\n      const { $nextTick, paths, $refs } = this\r\n\r\n      await $nextTick()\r\n\r\n      this.lengths = paths.map((foo, i) => $refs[`path${i}`][0].getTotalLength())\r\n    },\r\n    calcTimes () {\r\n      const { duration, points } = this.mergedConfig\r\n\r\n      this.times = points.map(foo => randomExtend(...duration) / 10)\r\n    },\r\n    calcTexts () {\r\n      const { points } = this.mergedConfig\r\n\r\n      this.texts = points.map(({ text }) => text)\r\n    },\r\n    consoleClickPos ({ offsetX, offsetY }) {\r\n      const { width, height, dev } = this\r\n\r\n      if (!dev) return\r\n\r\n      const relativeX = (offsetX / width).toFixed(2)\r\n      const relativeY = (offsetY / height).toFixed(2)\r\n\r\n      console.warn(`dv-flyline-chart DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"AAuJA,SAAAA,SAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,YAAA,EAAAC,gBAAA,EAAAC,IAAA;AAEA,OAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAF,UAAA;EACAG,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAC,GAAA;MACAH,IAAA,EAAAI,OAAA;MACAF,OAAA;IACA;EACA;EACAG,KAAA;IACA,MAAAC,EAAA,GAAAZ,IAAA;IACA;MACAa,GAAA;MACAC,MAAA,EAAAC,IAAA,CAAAC,MAAA;MACAC,MAAA,qBAAAL,EAAA;MACAM,YAAA,oBAAAN,EAAA;MACAO,UAAA,iBAAAP,EAAA;MACAQ,WAAA,kBAAAR,EAAA;MAEAS,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,WAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,UAAA;QACA;AACA;AACA;AACA;AACA;QACAC,YAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,CAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,QAAA;QACA;AACA;AACA;AACA;AACA;QACAC,QAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,QAAA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,QAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;AACA;UACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAR,QAAA;UACA;AACA;AACA;AACA;AACA;UACAK,KAAA;UACA;AACA;AACA;AACA;AACA;UACAI,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,cAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;UACA;AACA;AACA;AACA;AACA;UACAC,GAAA;QACA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;UACA;AACA;AACA;AACA;AACA;UACAH,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;UACA;AACA;AACA;AACA;AACA;UACAC,GAAA;QACA;MACA;MAEAE,YAAA;MAEAC,KAAA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;IACA;EACA;EACAC,KAAA;IACA7C,OAAA;MACA;QAAA8C;MAAA;MAEAA,QAAA;IACA;EACA;EACAC,OAAA;IACAC,yBAAA;MACA;QAAAF;MAAA;MAEAA,QAAA;IACA;IACAG,SAAA;MACA;QAAAH;MAAA;MAEAA,QAAA;IACA;IACA,MAAAA,SAAA;MACA;QAAAI,WAAA;QAAAC,kBAAA;QAAAC;MAAA;MAEAF,WAAA;MAEAC,kBAAA;MAEA,MAAAC,eAAA;MAEA;QAAAC,SAAA;QAAAC;MAAA;MAEAD,SAAA;MAEAC,SAAA;IACA;IACAJ,YAAA;MACA;QAAAlD,MAAA;QAAAgB;MAAA;MAEA,MAAAwB,YAAA,GAAAjD,SAAA,CAAAC,SAAA,CAAAwB,aAAA,SAAAhB,MAAA;MAEA;QAAAkB;MAAA,IAAAsB,YAAA;MAEAA,YAAA,CAAAtB,MAAA,GAAAA,MAAA,CAAAqC,GAAA,CAAAC,IAAA;QACA,IAAAA,IAAA,YAAAC,KAAA;UACA;YAAAC,QAAA,EAAAF,IAAA;YAAA5B,IAAA;UAAA;QACA;QAEA,OAAA4B,IAAA;MACA;MAEA,KAAAhB,YAAA,GAAAA,YAAA;IACA;IACAW,mBAAA;MACA;QAAAQ,OAAA;QAAAnB,YAAA;QAAAJ,KAAA;QAAAC;MAAA;MAEA;QAAApB,WAAA;QAAAC,MAAA;QAAAQ;MAAA,IAAAc,YAAA;MAEAtB,MAAA,GAAAA,MAAA,CAAAqC,GAAA;QAAAG;MAAA,MAAAA,QAAA;MAEA,IAAAhC,QAAA;QACAT,WAAA,IAAAmB,KAAA,GAAAnB,WAAA,KAAAoB,MAAA,GAAApB,WAAA;QACAC,MAAA,GAAAA,MAAA,CAAAqC,GAAA,GAAAK,CAAA,EAAAC,CAAA,OAAAzB,KAAA,GAAAwB,CAAA,EAAAvB,MAAA,GAAAwB,CAAA;MACA;MAEA,KAAApB,KAAA,GAAAvB,MAAA,CAAAqC,GAAA,CAAAO,KAAA,IAAAH,OAAA,CAAA1C,WAAA,EAAA6C,KAAA;IACA;IACAH,QAAAI,MAAA,EAAAD,KAAA;MACA;QAAAE;MAAA;MAEA,MAAAC,YAAA,GAAAD,eAAA,CAAAD,MAAA,EAAAD,KAAA;MAEA,QAAAA,KAAA,EAAAG,YAAA,EAAAF,MAAA;IACA;IACAC,gBAAA,CAAAE,EAAA,EAAAC,EAAA,IAAAC,EAAA,EAAAC,EAAA;MACA;QAAAC,gBAAA;QAAA9B;MAAA;MAEA;QAAAjB,SAAA;QAAAD;MAAA,IAAAkB,YAAA;MAEA,OAAA+B,EAAA,EAAAC,EAAA,MAAAN,EAAA,GAAAE,EAAA,QAAAD,EAAA,GAAAE,EAAA;MAEA,MAAAI,QAAA,GAAA/E,gBAAA,EAAAwE,EAAA,EAAAC,EAAA,IAAAC,EAAA,EAAAC,EAAA;MAEA,MAAAK,YAAA,GAAAD,QAAA,GAAAlD,SAAA;MACA,MAAAoD,QAAA,GAAAD,YAAA;MAEA,KAAAE,EAAA,EAAAC,EAAA,KAAAN,EAAA,EAAAC,EAAA;MAEA;QACAI,EAAA,IAAAD,QAAA;QACAE,EAAA,GAAAP,gBAAA,CAAAhD,CAAA,GAAAiD,EAAA,EAAAC,EAAA,GAAAI,EAAA;MACA,SAAAlF,gBAAA,EAAA6E,EAAA,EAAAC,EAAA,IAAAI,EAAA,EAAAC,EAAA,KAAAH,YAAA;MAEA,QAAAE,EAAA,EAAAC,EAAA;IACA;IACAP,iBAAAhD,CAAA,GAAAwD,EAAA,EAAAC,EAAA,GAAAnB,CAAA;MACA,MAAAC,CAAA,GAAAkB,EAAA,GAAAzD,CAAA,GAAAwD,EAAA,GAAAxD,CAAA,GAAAsC,CAAA;MAEA,QAAAA,CAAA,EAAAC,CAAA;IACA;IACA,MAAAT,gBAAA;MACA;QAAA4B,SAAA;QAAAvC,KAAA;QAAAwC;MAAA;MAEA,MAAAD,SAAA;MAEA,KAAAtC,OAAA,GAAAD,KAAA,CAAAc,GAAA,EAAA2B,GAAA,EAAAC,CAAA,KAAAF,KAAA,QAAAE,CAAA,OAAAC,cAAA;IACA;IACA/B,UAAA;MACA;QAAA5B,QAAA;QAAAP;MAAA,SAAAsB,YAAA;MAEA,KAAAG,KAAA,GAAAzB,MAAA,CAAAqC,GAAA,CAAA2B,GAAA,IAAAzF,YAAA,IAAAgC,QAAA;IACA;IACA6B,UAAA;MACA;QAAApC;MAAA,SAAAsB,YAAA;MAEA,KAAAI,KAAA,GAAA1B,MAAA,CAAAqC,GAAA;QAAA3B;MAAA,MAAAA,IAAA;IACA;IACAyD,gBAAA;MAAAC,OAAA;MAAAC;IAAA;MACA;QAAAnD,KAAA;QAAAC,MAAA;QAAAjC;MAAA;MAEA,KAAAA,GAAA;MAEA,MAAAoF,SAAA,IAAAF,OAAA,GAAAlD,KAAA,EAAAqD,OAAA;MACA,MAAAC,SAAA,IAAAH,OAAA,GAAAlD,MAAA,EAAAoD,OAAA;MAEAE,OAAA,CAAAC,IAAA,gDAAAN,OAAA,KAAAC,OAAA,8BAAAC,SAAA,KAAAE,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}