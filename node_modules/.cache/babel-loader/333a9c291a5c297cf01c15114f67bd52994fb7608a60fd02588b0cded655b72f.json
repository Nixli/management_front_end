{"ast":null,"code":"// 我把axios配置好之后，然后给项目中的组件使用\nimport axios from 'axios';\nimport Vue from 'vue';\nimport { Message } from 'element-ui';\n// router是一个文件夹： 然后es6模块会去改文件夹下面找：index.js\nimport router from '@/router';\nimport { BASE_URL } from './common';\n\n// 1. 配置服务器前缀\n// axios.defaults.baseURL = 'http://1.15.179.44:3001'\naxios.defaults.baseURL = BASE_URL;\n\n// 2. 有一个统一的地方设置token（每次发起请求的时候，都经过这个地方，就给请求头加上token）\n\n// 请求拦截器（以后axios每发起一次请求，都要通过这里）\n// axios.interceptors.request.use(config => { \n//   // config就是请求头的相关信息， url， 参数\n//   // console.log(config)\n//   // 从本地取出token，设置给config， config带给后端服务器\n//   const token = localStorage.getItem('token')\n//   // 设置token\n//   config.headers.authorization = token\n//   // 放行\n//   return config\n// })\n\n// 响应拦截器\n// axios.interceptors.response.use(res => {\n//   // res: 服务器响应结果\n//   // console.log('响应拦截的结果', res)\n//   // 如果res.data下有code属性，且 res.data.code 不为 0 ， 我们就应该弹框提示\n//   // 判断一个对象有没有某一个属性 hasOwnProperty\n//   if ( res.data.hasOwnProperty('code') &&  res.data.code !== 0) { \n//     // Vue.prototype.$message.error(res.data.msg)\n//     Message.error(res.data.msg)\n//   }\n//   return res\n// }, err => { \n//   console.log('后端出错了！！')\n//   // 拿到状态码，如果状态码是401，表示token出问题（有可能本地的token被篡改了，也有可能token过期了）， 回到登录页面，重新登录呀\n//   if ( err.response && err.response.data.code === 401) { \n//     // 跳转到登录页面： this.$router.push('/login')\n//     router.push('/login')\n//   }\n//   // return '网络出错！！！'\n//   return Promise.reject('网络出错！！！')\n// })\n\n// 导出\nexport default axios;","map":{"version":3,"names":["axios","Vue","Message","router","BASE_URL","defaults","baseURL"],"sources":["C:/vue-demoList/template01-mywebapp/src/utils/request.js"],"sourcesContent":["// 我把axios配置好之后，然后给项目中的组件使用\nimport axios from 'axios'\nimport Vue from 'vue'\nimport { Message } from 'element-ui'\n// router是一个文件夹： 然后es6模块会去改文件夹下面找：index.js\nimport router from '@/router'\nimport { BASE_URL } from './common'\n  \n\n// 1. 配置服务器前缀\n// axios.defaults.baseURL = 'http://1.15.179.44:3001'\naxios.defaults.baseURL = BASE_URL\n\n// 2. 有一个统一的地方设置token（每次发起请求的时候，都经过这个地方，就给请求头加上token）\n\n// 请求拦截器（以后axios每发起一次请求，都要通过这里）\n// axios.interceptors.request.use(config => { \n//   // config就是请求头的相关信息， url， 参数\n//   // console.log(config)\n//   // 从本地取出token，设置给config， config带给后端服务器\n//   const token = localStorage.getItem('token')\n//   // 设置token\n//   config.headers.authorization = token\n//   // 放行\n//   return config\n// })\n\n// 响应拦截器\n// axios.interceptors.response.use(res => {\n//   // res: 服务器响应结果\n//   // console.log('响应拦截的结果', res)\n//   // 如果res.data下有code属性，且 res.data.code 不为 0 ， 我们就应该弹框提示\n//   // 判断一个对象有没有某一个属性 hasOwnProperty\n//   if ( res.data.hasOwnProperty('code') &&  res.data.code !== 0) { \n//     // Vue.prototype.$message.error(res.data.msg)\n//     Message.error(res.data.msg)\n//   }\n//   return res\n// }, err => { \n//   console.log('后端出错了！！')\n//   // 拿到状态码，如果状态码是401，表示token出问题（有可能本地的token被篡改了，也有可能token过期了）， 回到登录页面，重新登录呀\n//   if ( err.response && err.response.data.code === 401) { \n//     // 跳转到登录页面： this.$router.push('/login')\n//     router.push('/login')\n//   }\n//   // return '网络出错！！！'\n//   return Promise.reject('网络出错！！！')\n// })\n\n// 导出\nexport default axios"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,KAAK;AACrB,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,QAAQ,QAAQ,UAAU;;AAGnC;AACA;AACAJ,KAAK,CAACK,QAAQ,CAACC,OAAO,GAAGF,QAAQ;;AAEjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}