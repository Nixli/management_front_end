{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      list: [],\n      // 分页相关\n      pageno: 1,\n      pagesize: 5,\n      total: 0,\n      // 搜索条件\n      params: {\n        assetName: '',\n        brandModel: ''\n      },\n      // 控制弹框的显示与隐藏\n      dialogFormVisible: false,\n      // 新增表单的数据\n      userFormData: {\n        assetNumber: '',\n        assetName: '',\n        brandModel: '',\n        description: '',\n        accountBook: {\n          bookID: localStorage.getItem('bookID')\n        } // 使用关系属性名\n      },\n      // add： 新增   edit: '更新'\n      actionType: '',\n      id: '',\n      bookID: localStorage.getItem('bookID')\n    };\n  },\n  created() {\n    this.getList();\n  },\n  methods: {\n    async getList() {\n      const res = await axios({\n        method: \"get\",\n        url: \"/fixedasset\",\n        params: {\n          pageno: this.pageno,\n          pagesize: this.pagesize,\n          bookID: this.bookID,\n          ...this.params\n        }\n      });\n      this.list = res.data.data.list;\n      this.total = res.data.data.total;\n    },\n    // 点击搜索\n    search() {\n      this.getList();\n    },\n    // 页码改变\n    pagechange(pageno) {\n      // 条件改变\n      this.pageno = pageno;\n      // 重新请求数据\n      this.getList();\n    },\n    // 打开新增弹窗，\n    addOpen() {\n      // 打开弹窗\n      this.dialogFormVisible = true;\n      // 记录状态\n      this.actionType = 'add';\n      // 重置userFormData\n      this.userFormData = {\n        assetNumber: '',\n        assetName: '',\n        brandModel: '',\n        description: '',\n        accountBook: {\n          bookID: localStorage.getItem('bookID')\n        } // 使用关系属性名\n      };\n    },\n    //修改弹窗\n    edit(row) {\n      // 打开弹窗\n      this.dialogFormVisible = true;\n      // 数据回显\n      this.userFormData.assetNumber = row.assetNumber;\n      this.userFormData.assetName = row.assetName;\n      this.userFormData.brandModel = row.brandModel;\n      this.userFormData.description = row.description;\n      // 记录id\n      this.id = row.assetID;\n      console.log(row);\n      // 记录动作\n      this.actionType = 'edit';\n    },\n    //新增或修改固定资产\n    async submit(id) {\n      // 拷贝userFormData到data\n      const data = {\n        ...this.userFormData\n      };\n      // 修改的时候需要把id带过去\n      if (this.actionType === 'edit') {\n        data.assetID = this.id;\n      }\n      const res = await axios({\n        url: '/fixedasset',\n        method: 'post',\n        data: data\n      });\n      this.dialogFormVisible = false;\n      this.getList();\n    },\n    //删除固定资产\n    async removeFixedasset(id) {\n      const res = await axios({\n        url: '/removefixedasset',\n        method: 'post',\n        // data一定是个对象，不能直接把id给data，把id变成一个对象给到data\n        data: {\n          assetID: id\n        }\n      });\n      this.getList();\n    }\n  }\n};","map":{"version":3,"names":["axios","data","list","pageno","pagesize","total","params","assetName","brandModel","dialogFormVisible","userFormData","assetNumber","description","accountBook","bookID","localStorage","getItem","actionType","id","created","getList","methods","res","method","url","search","pagechange","addOpen","edit","row","assetID","console","log","submit","removeFixedasset"],"sources":["src/views/system/System.vue"],"sourcesContent":["<template>\n  <div style=\"height: auto; width: auto;\">\n\n      <!-- 搜素和新增区域 -->\n      <el-card>\n          <div style=\"display: flex; flex-direction: row;\">\n              <!-- 搜索区域 -->\n              <el-form :inline=\"true\">\n                  <el-form-item label=\"员工姓名\">\n                      <el-input v-model=\"params.assetName\" placeholder=\"请输入员工姓名\"></el-input>\n                  </el-form-item>\n                  <el-form-item label=\"员工职位\">\n                      <el-input v-model=\"params.brandModel\" placeholder=\"请输入员工职位\"></el-input>\n                  </el-form-item>\n                  <el-form-item>\n                      <el-button @click=\"search\" type=\"primary\" icon=\"el-icon-search\">搜索</el-button>\n                  </el-form-item>\n                  <el-button type=\"primary\" @click=\"addOpen\">新增员工信息</el-button>\n              </el-form>\n          </div>\n      </el-card>\n\n      <!-- 员工信息表 -->\n      <el-card style=\"margin-top: 20px;\">\n\n          <el-card>\n              <span style=\"font-size: 16px;font-weight: bold;font-family: 'Times New Roman', Times, serif;\">员工信息表</span>\n          </el-card>\n\n          <el-table :data=\"list\" border style=\"width: 100%\">\n              <el-table-column prop=\"assetID\" label=\"序号\" width=\"50\"> </el-table-column>\n              <el-table-column prop=\"assetNumber\" label=\"资产编号\"> </el-table-column>\n              <el-table-column prop=\"assetName\" label=\"资产名称\"> </el-table-column>\n              <el-table-column prop=\"brandModel\" label=\"资产类型\"> </el-table-column>\n              <el-table-column prop=\"description\" label=\"品牌型号\"> </el-table-column>\n              <el-table-column prop=\"ctime\" label=\"开始使用时间\"> </el-table-column>\n              <el-table-column fixed=\"right\" label=\"操作\">\n                  <template #default=\"{ row }\">\n                      <el-button type=\"text\" size=\"small\" @click=\"removeFixedasset(row.assetID)\">删除</el-button>\n                      <el-button type=\"text\" size=\"small\" @click=\"edit(row)\">编辑</el-button>\n                  </template>\n              </el-table-column>\n          </el-table>\n\n          <!-- 分页组件 -->\n          <el-pagination @current-change=\"pagechange\" background layout=\"prev, pager, next\" :total=\"total\"\n              :page-size=\"pagesize\" style=\"text-align: center; margin-top: 10px;\">\n          </el-pagination>\n      </el-card>\n\n      <!-- 弹窗区域 -->\n      <el-dialog :title=\"actionType == 'add' ? '新增人员信息' : '修改员工信息'\" :visible.sync=\"dialogFormVisible\">\n          <el-form :model=\"userFormData\" class=\"demo-form-inline\" label-width=\"120px\">\n\n              <el-form-item label=\"资产编号\">\n                  <el-input v-model=\"userFormData.assetNumber\" placeholder=\"资产编号\"></el-input>\n              </el-form-item>\n\n              <el-form-item label=\"资产名称\">\n                  <el-input v-model=\"userFormData.assetName\" placeholder=\"资产名称\"></el-input>\n              </el-form-item>\n\n              <el-form-item label=\"资产类型\">\n                  <el-input v-model=\"userFormData.brandModel\" placeholder=\"资产类型\"></el-input>\n              </el-form-item>\n\n              <el-form-item label=\"品牌型号\">\n                  <el-input v-model=\"userFormData.description\" placeholder=\"品牌型号\"></el-input>\n              </el-form-item>\n\n              <el-form-item>\n                  <el-button @click=\"submit\">提交</el-button>\n              </el-form-item>\n\n          </el-form>\n      </el-dialog>\n  </div>\n</template>\n\n<script>\n\nimport axios from \"axios\";\n\nexport default {\n\n  data() {\n      return {\n          list: [],\n          // 分页相关\n          pageno: 1,\n          pagesize: 5,\n          total: 0,\n          // 搜索条件\n          params: {\n              assetName: '',\n              brandModel: ''\n          },\n          // 控制弹框的显示与隐藏\n          dialogFormVisible: false,\n          // 新增表单的数据\n          userFormData: {\n              assetNumber: '',\n              assetName: '',\n              brandModel: '',\n              description: '',\n              accountBook: { bookID: localStorage.getItem('bookID') } // 使用关系属性名\n          },\n          // add： 新增   edit: '更新'\n          actionType: '',\n          id: '',\n          bookID:localStorage.getItem('bookID')\n      };\n  },\n  created() {\n      this.getList()\n  },\n\n  methods: {\n      async getList() {\n          const res = await axios({\n              method: \"get\",\n              url: \"/fixedasset\",\n              params: {\n                  pageno: this.pageno,\n                  pagesize: this.pagesize,\n                  bookID:this.bookID,\n                  ...this.params\n              },\n          });\n          this.list = res.data.data.list;\n          this.total = res.data.data.total;\n      },\n      \n      // 点击搜索\n      search() {\n          this.getList()\n      },\n\n      // 页码改变\n      pagechange(pageno) {\n          // 条件改变\n          this.pageno = pageno\n          // 重新请求数据\n          this.getList()\n      },\n\n      // 打开新增弹窗，\n      addOpen() {\n          // 打开弹窗\n          this.dialogFormVisible = true\n          // 记录状态\n          this.actionType = 'add'\n          // 重置userFormData\n          this.userFormData = {\n              assetNumber: '',\n              assetName: '',\n              brandModel: '',\n              description: '',\n              accountBook: { bookID: localStorage.getItem('bookID') } // 使用关系属性名\n          }\n      },\n\n      //修改弹窗\n      edit(row) {\n          // 打开弹窗\n          this.dialogFormVisible = true\n          // 数据回显\n          this.userFormData.assetNumber = row.assetNumber\n          this.userFormData.assetName = row.assetName\n          this.userFormData.brandModel = row.brandModel\n          this.userFormData.description = row.description\n          // 记录id\n          this.id = row.assetID\n          console.log(row)\n          // 记录动作\n          this.actionType = 'edit'\n      },\n\n      //新增或修改固定资产\n      async submit(id) {\n          // 拷贝userFormData到data\n          const data = { ...this.userFormData }\n          // 修改的时候需要把id带过去\n          if (this.actionType === 'edit') {\n              data.assetID = this.id\n          }\n          const res = await axios({\n              url: '/fixedasset',\n              method: 'post',\n              data: data\n          })\n          this.dialogFormVisible = false\n          this.getList()\n      },\n      //删除固定资产\n      async removeFixedasset(id) {\n\n          const res = await axios({\n              url: '/removefixedasset',\n              method: 'post',\n              // data一定是个对象，不能直接把id给data，把id变成一个对象给到data\n              data: {\n                  assetID: id\n              }\n          })\n          this.getList()\n      },\n\n  },\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.row-box {\n  width: 100%;\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 8px;\n  justify-content: center;\n}\n</style>"],"mappings":"AAiFA,OAAAA,KAAA;AAEA;EAEAC,KAAA;IACA;MACAC,IAAA;MACA;MACAC,MAAA;MACAC,QAAA;MACAC,KAAA;MACA;MACAC,MAAA;QACAC,SAAA;QACAC,UAAA;MACA;MACA;MACAC,iBAAA;MACA;MACAC,YAAA;QACAC,WAAA;QACAJ,SAAA;QACAC,UAAA;QACAI,WAAA;QACAC,WAAA;UAAAC,MAAA,EAAAC,YAAA,CAAAC,OAAA;QAAA;MACA;MACA;MACAC,UAAA;MACAC,EAAA;MACAJ,MAAA,EAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAG,QAAA;IACA,KAAAC,OAAA;EACA;EAEAC,OAAA;IACA,MAAAD,QAAA;MACA,MAAAE,GAAA,SAAAtB,KAAA;QACAuB,MAAA;QACAC,GAAA;QACAlB,MAAA;UACAH,MAAA,OAAAA,MAAA;UACAC,QAAA,OAAAA,QAAA;UACAU,MAAA,OAAAA,MAAA;UACA,QAAAR;QACA;MACA;MACA,KAAAJ,IAAA,GAAAoB,GAAA,CAAArB,IAAA,CAAAA,IAAA,CAAAC,IAAA;MACA,KAAAG,KAAA,GAAAiB,GAAA,CAAArB,IAAA,CAAAA,IAAA,CAAAI,KAAA;IACA;IAEA;IACAoB,OAAA;MACA,KAAAL,OAAA;IACA;IAEA;IACAM,WAAAvB,MAAA;MACA;MACA,KAAAA,MAAA,GAAAA,MAAA;MACA;MACA,KAAAiB,OAAA;IACA;IAEA;IACAO,QAAA;MACA;MACA,KAAAlB,iBAAA;MACA;MACA,KAAAQ,UAAA;MACA;MACA,KAAAP,YAAA;QACAC,WAAA;QACAJ,SAAA;QACAC,UAAA;QACAI,WAAA;QACAC,WAAA;UAAAC,MAAA,EAAAC,YAAA,CAAAC,OAAA;QAAA;MACA;IACA;IAEA;IACAY,KAAAC,GAAA;MACA;MACA,KAAApB,iBAAA;MACA;MACA,KAAAC,YAAA,CAAAC,WAAA,GAAAkB,GAAA,CAAAlB,WAAA;MACA,KAAAD,YAAA,CAAAH,SAAA,GAAAsB,GAAA,CAAAtB,SAAA;MACA,KAAAG,YAAA,CAAAF,UAAA,GAAAqB,GAAA,CAAArB,UAAA;MACA,KAAAE,YAAA,CAAAE,WAAA,GAAAiB,GAAA,CAAAjB,WAAA;MACA;MACA,KAAAM,EAAA,GAAAW,GAAA,CAAAC,OAAA;MACAC,OAAA,CAAAC,GAAA,CAAAH,GAAA;MACA;MACA,KAAAZ,UAAA;IACA;IAEA;IACA,MAAAgB,OAAAf,EAAA;MACA;MACA,MAAAjB,IAAA;QAAA,QAAAS;MAAA;MACA;MACA,SAAAO,UAAA;QACAhB,IAAA,CAAA6B,OAAA,QAAAZ,EAAA;MACA;MACA,MAAAI,GAAA,SAAAtB,KAAA;QACAwB,GAAA;QACAD,MAAA;QACAtB,IAAA,EAAAA;MACA;MACA,KAAAQ,iBAAA;MACA,KAAAW,OAAA;IACA;IACA;IACA,MAAAc,iBAAAhB,EAAA;MAEA,MAAAI,GAAA,SAAAtB,KAAA;QACAwB,GAAA;QACAD,MAAA;QACA;QACAtB,IAAA;UACA6B,OAAA,EAAAZ;QACA;MACA;MACA,KAAAE,OAAA;IACA;EAEA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}