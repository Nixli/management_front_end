{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvConicalColumnChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      ref: 'conical-column-chart',\n      defaultConfig: {\n        /**\r\n         * @description Chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\n        data: [],\n        /**\r\n         * @description Chart img\r\n         * @type {Array<String>}\r\n         * @default img = []\r\n         */\n        img: [],\n        /**\r\n         * @description Chart font size\r\n         * @type {Number}\r\n         * @default fontSize = 12\r\n         */\n        fontSize: 12,\n        /**\r\n         * @description Img side length\r\n         * @type {Number}\r\n         * @default imgSideLength = 30\r\n         */\n        imgSideLength: 30,\n        /**\r\n         * @description Column color\r\n         * @type {String}\r\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\r\n         */\n        columnColor: 'rgba(0, 194, 255, 0.4)',\n        /**\r\n         * @description Text color\r\n         * @type {String}\r\n         * @default textColor = '#fff'\r\n         */\n        textColor: '#fff',\n        /**\r\n         * @description Show value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\n        showValue: false\n      },\n      mergedConfig: null,\n      column: []\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    calcData() {\n      const {\n        mergeConfig,\n        initData,\n        calcSVGPath\n      } = this;\n      mergeConfig();\n      initData();\n      calcSVGPath();\n    },\n    mergeConfig() {\n      const {\n        defaultConfig,\n        config\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    initData() {\n      const {\n        mergedConfig\n      } = this;\n      let {\n        data\n      } = mergedConfig;\n      data = deepClone(data, true);\n      data.sort(({\n        value: a\n      }, {\n        value: b\n      }) => {\n        if (a > b) return -1;\n        if (a < b) return 1;\n        if (a === b) return 0;\n      });\n      const max = data[0] ? data[0].value : 10;\n      data = data.map(item => ({\n        ...item,\n        percent: item.value / max\n      }));\n      mergedConfig.data = data;\n    },\n    calcSVGPath() {\n      const {\n        mergedConfig,\n        width,\n        height\n      } = this;\n      const {\n        imgSideLength,\n        fontSize,\n        data\n      } = mergedConfig;\n      const itemNum = data.length;\n      const gap = width / (itemNum + 1);\n      const useAbleHeight = height - imgSideLength - fontSize - 5;\n      const svgBottom = height - fontSize - 5;\n      this.column = data.map((item, i) => {\n        const {\n          percent\n        } = item;\n        const middleXPos = gap * (i + 1);\n        const leftXPos = gap * i;\n        const rightXpos = gap * (i + 2);\n        const middleYPos = svgBottom - useAbleHeight * percent;\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos;\n        const d = `\n          M${leftXPos}, ${svgBottom}\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\n          M${middleXPos},${middleYPos}\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\n          L${leftXPos}, ${svgBottom}\n          Z\n        `;\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2;\n        return {\n          ...item,\n          d,\n          x: middleXPos,\n          y: middleYPos,\n          textY\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","config","type","Object","default","data","ref","defaultConfig","img","fontSize","imgSideLength","columnColor","textColor","showValue","mergedConfig","column","watch","calcData","methods","afterAutoResizeMixinInit","onResize","mergeConfig","initData","calcSVGPath","sort","value","a","b","max","map","item","percent","width","height","itemNum","length","gap","useAbleHeight","svgBottom","i","middleXPos","leftXPos","rightXpos","middleYPos","controlYPos","d","textY","x","y"],"sources":["node_modules/@jiaminghi/data-view/lib/components/conicalColumnChart/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-conical-column-chart\" :ref=\"ref\">\r\n    <svg :width=\"width\" :height=\"height\">\r\n      <g\r\n        v-for=\"(item, i) in column\"\r\n        :key=\"i\"\r\n      >\r\n        <path\r\n          :d=\"item.d\"\r\n          :fill=\"mergedConfig.columnColor\"\r\n        />\r\n        <text\r\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\r\n          :fill=\"mergedConfig.textColor\"\r\n          :x=\"item.x\"\r\n          :y=\"height - 4\"\r\n        >\r\n          {{ item.name }}\r\n        </text>\r\n        <image\r\n          v-if=\"mergedConfig.img.length\"\r\n          :xlink:href=\"mergedConfig.img[i % mergedConfig.img.length]\"\r\n          :width=\"mergedConfig.imgSideLength\"\r\n          :height=\"mergedConfig.imgSideLength\"\r\n          :x=\"item.x - mergedConfig.imgSideLength / 2\"\r\n          :y=\"item.y - mergedConfig.imgSideLength\"\r\n        />\r\n        <text\r\n          v-if=\"mergedConfig.showValue\"\r\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\r\n          :fill=\"mergedConfig.textColor\"\r\n          :x=\"item.x\"\r\n          :y=\"item.textY\"\r\n        >\r\n          {{ item.value }}\r\n        </text>\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvConicalColumnChart',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      ref: 'conical-column-chart',\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Chart img\r\n         * @type {Array<String>}\r\n         * @default img = []\r\n         */\r\n        img: [],\r\n        /**\r\n         * @description Chart font size\r\n         * @type {Number}\r\n         * @default fontSize = 12\r\n         */\r\n        fontSize: 12,\r\n        /**\r\n         * @description Img side length\r\n         * @type {Number}\r\n         * @default imgSideLength = 30\r\n         */\r\n        imgSideLength: 30,\r\n        /**\r\n         * @description Column color\r\n         * @type {String}\r\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\r\n         */\r\n        columnColor: 'rgba(0, 194, 255, 0.4)',\r\n        /**\r\n         * @description Text color\r\n         * @type {String}\r\n         * @default textColor = '#fff'\r\n         */\r\n        textColor: '#fff',\r\n        /**\r\n         * @description Show value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      column: []\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, initData, calcSVGPath } = this\r\n\r\n      mergeConfig()\r\n\r\n      initData()\r\n\r\n      calcSVGPath()\r\n    },\r\n    mergeConfig () {\r\n      const { defaultConfig, config } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    },\r\n    initData () {\r\n      const { mergedConfig } = this\r\n      let { data } = mergedConfig\r\n\r\n      data = deepClone(data, true)\r\n\r\n      data.sort(({ value: a }, { value: b }) => {\r\n        if (a > b) return -1\r\n        if (a < b) return 1\r\n        if (a === b) return 0\r\n      })\r\n\r\n      const max = data[0] ? data[0].value : 10\r\n\r\n      data = data.map(item => ({\r\n        ...item,\r\n        percent: item.value / max\r\n      }))\r\n\r\n      mergedConfig.data = data\r\n    },\r\n    calcSVGPath () {\r\n      const { mergedConfig, width, height } = this\r\n\r\n      const { imgSideLength, fontSize, data } = mergedConfig\r\n\r\n      const itemNum = data.length\r\n      const gap = width / (itemNum + 1)\r\n\r\n      const useAbleHeight = height - imgSideLength - fontSize - 5\r\n      const svgBottom = height - fontSize - 5\r\n\r\n      this.column = data.map((item, i) => {\r\n        const { percent } = item\r\n\r\n        const middleXPos = gap * (i + 1)\r\n        const leftXPos = gap * i\r\n        const rightXpos = gap * (i + 2)\r\n\r\n        const middleYPos = svgBottom - useAbleHeight * percent\r\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\r\n\r\n        const d = `\r\n          M${leftXPos}, ${svgBottom}\r\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\r\n          M${middleXPos},${middleYPos}\r\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\r\n          L${leftXPos}, ${svgBottom}\r\n          Z\r\n        `\r\n\r\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\r\n\r\n        return {\r\n          ...item,\r\n          d,\r\n          x: middleXPos,\r\n          y: middleYPos,\r\n          textY\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}