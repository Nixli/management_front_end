{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvCapsuleChart',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\r\n         * @description Capsule chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\r\n         */\n        data: [],\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\r\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\n        colors: ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293'],\n        /**\r\n         * @description Chart unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         */\n        unit: '',\n        /**\r\n         * @description Show item value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\n        showValue: false\n      },\n      mergedConfig: null,\n      capsuleLength: [],\n      capsuleValue: [],\n      labelData: [],\n      labelDataLength: []\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    calcData() {\n      const {\n        mergeConfig,\n        calcCapsuleLengthAndLabelData\n      } = this;\n      mergeConfig();\n      calcCapsuleLengthAndLabelData();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcCapsuleLengthAndLabelData() {\n      const {\n        data\n      } = this.mergedConfig;\n      if (!data.length) return;\n      const capsuleValue = data.map(({\n        value\n      }) => value);\n      const maxValue = Math.max(...capsuleValue);\n      this.capsuleValue = capsuleValue;\n      this.capsuleLength = capsuleValue.map(v => maxValue ? v / maxValue : 0);\n      const oneFifth = maxValue / 5;\n      const labelData = Array.from(new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth))));\n      this.labelData = labelData;\n      this.labelDataLength = Array.from(labelData).map(v => maxValue ? v / maxValue : 0);\n    }\n  },\n  mounted() {\n    const {\n      calcData\n    } = this;\n    calcData();\n  }\n};","map":{"version":3,"names":["deepMerge","deepClone","name","props","config","type","Object","default","data","defaultConfig","colors","unit","showValue","mergedConfig","capsuleLength","capsuleValue","labelData","labelDataLength","watch","calcData","methods","mergeConfig","calcCapsuleLengthAndLabelData","length","map","value","maxValue","Math","max","v","oneFifth","Array","from","Set","fill","i","ceil","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/capsuleChart/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-capsule-chart\">\r\n    <template v-if=\"mergedConfig\">\r\n      <div class=\"label-column\">\r\n        <div v-for=\"item in mergedConfig.data\" :key=\"item.name\">{{ item.name }}</div>\r\n        <div>&nbsp;</div>\r\n      </div>\r\n\r\n      <div class=\"capsule-container\">\r\n        <div class=\"capsule-item\" v-for=\"(capsule, index) in capsuleLength\" :key=\"index\">\r\n          <div\r\n            class=\"capsule-item-column\"\r\n            :style=\"`width: ${capsule * 100}%; background-color: ${mergedConfig.colors[index % mergedConfig.colors.length]};`\"\r\n          >\r\n            <div\r\n              v-if=\"mergedConfig.showValue\"\r\n              class=\"capsule-item-value\"\r\n            >{{ capsuleValue[index] }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"unit-label\">\r\n          <div\r\n            v-for=\"(label, index) in labelData\"\r\n            :key=\"label + index\"\r\n          >{{ label }}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"unit-text\" v-if=\"mergedConfig.unit\">{{ mergedConfig.unit }}</div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvCapsuleChart',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultConfig: {\r\n        /**\r\n         * @description Capsule chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\r\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: [\r\n          '#37a2da',\r\n          '#32c5e9',\r\n          '#67e0e3',\r\n          '#9fe6b8',\r\n          '#ffdb5c',\r\n          '#ff9f7f',\r\n          '#fb7293'\r\n        ],\r\n        /**\r\n         * @description Chart unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         */\r\n        unit: '',\r\n        /**\r\n         * @description Show item value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      capsuleLength: [],\r\n      capsuleValue: [],\r\n      labelData: [],\r\n      labelDataLength: []\r\n    }\r\n  },\r\n  watch: {\r\n    config() {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    calcData() {\r\n      const { mergeConfig, calcCapsuleLengthAndLabelData } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcCapsuleLengthAndLabelData()\r\n    },\r\n    mergeConfig() {\r\n      let { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(\r\n        deepClone(defaultConfig, true),\r\n        config || {}\r\n      )\r\n    },\r\n    calcCapsuleLengthAndLabelData() {\r\n      const { data } = this.mergedConfig\r\n\r\n      if (!data.length) return\r\n\r\n      const capsuleValue = data.map(({ value }) => value)\r\n\r\n      const maxValue = Math.max(...capsuleValue)\r\n\r\n      this.capsuleValue = capsuleValue\r\n\r\n      this.capsuleLength = capsuleValue.map(v => (maxValue ? v / maxValue : 0))\r\n\r\n      const oneFifth = maxValue / 5\r\n\r\n      const labelData = Array.from(\r\n        new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth)))\r\n      )\r\n\r\n      this.labelData = labelData\r\n\r\n      this.labelDataLength = Array.from(labelData).map(v =>\r\n        maxValue ? v / maxValue : 0\r\n      )\r\n    }\r\n  },\r\n  mounted() {\r\n    const { calcData } = this\r\n\r\n    calcData()\r\n  }\r\n}\r\n</script>"],"mappings":"AAmCA,SAAAA,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,aAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAD,IAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAE,MAAA,GACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA;QACA;AACA;AACA;AACA;AACA;QACAC,IAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;MACA;MAEAC,YAAA;MAEAC,aAAA;MACAC,YAAA;MACAC,SAAA;MACAC,eAAA;IACA;EACA;EACAC,KAAA;IACAd,OAAA;MACA;QAAAe;MAAA;MAEAA,QAAA;IACA;EACA;EACAC,OAAA;IACAD,SAAA;MACA;QAAAE,WAAA;QAAAC;MAAA;MAEAD,WAAA;MAEAC,6BAAA;IACA;IACAD,YAAA;MACA;QAAAjB,MAAA;QAAAK;MAAA;MAEA,KAAAI,YAAA,GAAAb,SAAA,CACAC,SAAA,CAAAQ,aAAA,SACAL,MAAA,MACA;IACA;IACAkB,8BAAA;MACA;QAAAd;MAAA,SAAAK,YAAA;MAEA,KAAAL,IAAA,CAAAe,MAAA;MAEA,MAAAR,YAAA,GAAAP,IAAA,CAAAgB,GAAA;QAAAC;MAAA,MAAAA,KAAA;MAEA,MAAAC,QAAA,GAAAC,IAAA,CAAAC,GAAA,IAAAb,YAAA;MAEA,KAAAA,YAAA,GAAAA,YAAA;MAEA,KAAAD,aAAA,GAAAC,YAAA,CAAAS,GAAA,CAAAK,CAAA,IAAAH,QAAA,GAAAG,CAAA,GAAAH,QAAA;MAEA,MAAAI,QAAA,GAAAJ,QAAA;MAEA,MAAAV,SAAA,GAAAe,KAAA,CAAAC,IAAA,CACA,IAAAC,GAAA,KAAAF,KAAA,IAAAG,IAAA,IAAAV,GAAA,EAAAK,CAAA,EAAAM,CAAA,KAAAR,IAAA,CAAAS,IAAA,CAAAD,CAAA,GAAAL,QAAA,GACA;MAEA,KAAAd,SAAA,GAAAA,SAAA;MAEA,KAAAC,eAAA,GAAAc,KAAA,CAAAC,IAAA,CAAAhB,SAAA,EAAAQ,GAAA,CAAAK,CAAA,IACAH,QAAA,GAAAG,CAAA,GAAAH,QAAA,IACA;IACA;EACA;EACAW,QAAA;IACA;MAAAlB;IAAA;IAEAA,QAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}