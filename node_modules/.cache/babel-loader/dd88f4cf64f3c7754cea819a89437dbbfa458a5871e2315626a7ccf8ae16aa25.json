{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { randomExtend } from '../../../util';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration6',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    const rectWidth = 7;\n    return {\n      ref: 'decoration-6',\n      svgWH: [300, 35],\n      svgScale: [1, 1],\n      rowNum: 1,\n      rowPoints: 40,\n      rectWidth,\n      halfRectWidth: rectWidth / 2,\n      points: [],\n      heights: [],\n      minHeights: [],\n      randoms: [],\n      defaultColor: ['#7acaec', '#7acaec'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    calcSVGData() {\n      const {\n        calcPointsPosition,\n        calcScale\n      } = this;\n      calcPointsPosition();\n      calcScale();\n    },\n    calcPointsPosition() {\n      const {\n        svgWH,\n        rowNum,\n        rowPoints\n      } = this;\n      const [w, h] = svgWH;\n      const horizontalGap = w / (rowPoints + 1);\n      const verticalGap = h / (rowNum + 1);\n      let points = new Array(rowNum).fill(0).map((foo, i) => new Array(rowPoints).fill(0).map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)]));\n      this.points = points.reduce((all, item) => [...all, ...item], []);\n      const heights = this.heights = new Array(rowNum * rowPoints).fill(0).map(foo => Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h));\n      this.minHeights = new Array(rowNum * rowPoints).fill(0).map((foo, i) => heights[i] * Math.random());\n      this.randoms = new Array(rowNum * rowPoints).fill(0).map(foo => Math.random() + 1.5);\n    },\n    calcScale() {\n      const {\n        width,\n        height,\n        svgWH\n      } = this;\n      const [w, h] = svgWH;\n      this.svgScale = [width / w, height / h];\n    },\n    onResize() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted() {\n    const {\n      mergeColor\n    } = this;\n    mergeColor();\n  }\n};","map":{"version":3,"names":["autoResize","randomExtend","deepMerge","deepClone","name","mixins","props","color","type","Array","default","data","rectWidth","ref","svgWH","svgScale","rowNum","rowPoints","halfRectWidth","points","heights","minHeights","randoms","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","calcPointsPosition","calcScale","w","h","horizontalGap","verticalGap","fill","map","foo","i","j","reduce","all","item","Math","random","width","height","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration6/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-decoration-6\" :ref=\"ref\">\r\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\r\n      <template\r\n        v-for=\"(point, i) in points\"\r\n      >\r\n        <rect\r\n          :key=\"i\"\r\n          :fill=\"mergedColor[Math.random() > 0.5 ? 0 : 1]\"\r\n          :x=\"point[0] - halfRectWidth\"\r\n          :y=\"point[1] - heights[i] / 2\"\r\n          :width=\"rectWidth\"\r\n          :height=\"heights[i]\"\r\n        >\r\n          <animate\r\n            attributeName=\"y\"\r\n            :values=\"`${point[1] - minHeights[i] / 2};${point[1] - heights[i] / 2};${point[1] - minHeights[i] / 2}`\"\r\n            :dur=\"`${randoms[i]}s`\"\r\n            keyTimes=\"0;0.5;1\"\r\n            calcMode=\"spline\"\r\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\r\n            begin=\"0s\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n          <animate\r\n            attributeName=\"height\"\r\n            :values=\"`${minHeights[i]};${heights[i]};${minHeights[i]}`\"\r\n            :dur=\"`${randoms[i]}s`\"\r\n            keyTimes=\"0;0.5;1\"\r\n            calcMode=\"spline\"\r\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\r\n            begin=\"0s\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </rect>\r\n      </template>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { randomExtend } from '../../../util'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvDecoration6',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    }\r\n  },\r\n  data () {\r\n    const rectWidth = 7\r\n\r\n    return {\r\n      ref: 'decoration-6',\r\n\r\n      svgWH: [300, 35],\r\n\r\n      svgScale: [1, 1],\r\n\r\n      rowNum: 1,\r\n      rowPoints: 40,\r\n\r\n      rectWidth,\r\n      halfRectWidth: rectWidth / 2,\r\n\r\n      points: [],\r\n      heights: [],\r\n      minHeights: [],\r\n      randoms: [],\r\n\r\n      defaultColor: ['#7acaec', '#7acaec'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    calcSVGData () {\r\n      const { calcPointsPosition, calcScale } = this\r\n\r\n      calcPointsPosition()\r\n\r\n      calcScale()\r\n    },\r\n    calcPointsPosition () {\r\n      const { svgWH, rowNum, rowPoints } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      const horizontalGap = w / (rowPoints + 1)\r\n      const verticalGap = h / (rowNum + 1)\r\n\r\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\r\n        new Array(rowPoints).fill(0).map((foo, j) => [\r\n          horizontalGap * (j + 1), verticalGap * (i + 1)\r\n        ]))\r\n\r\n      this.points = points.reduce((all, item) => [...all, ...item], [])\r\n      const heights = this.heights = new Array(rowNum * rowPoints)\r\n        .fill(0).map(foo =>\r\n          Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h))\r\n\r\n      this.minHeights = new Array(rowNum * rowPoints)\r\n        .fill(0).map((foo, i) => heights[i] * Math.random())\r\n\r\n      this.randoms = new Array(rowNum * rowPoints)\r\n        .fill(0).map(foo => Math.random() + 1.5)\r\n    },\r\n    calcScale () {\r\n      const { width, height, svgWH } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      this.svgScale = [width / w, height / h]\r\n    },\r\n    onResize () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    }\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n</script>"],"mappings":"AAyCA,OAAAA,UAAA;AAEA,SAAAC,YAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAL,UAAA;EACAM,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAC,KAAA;IACA,MAAAC,SAAA;IAEA;MACAC,GAAA;MAEAC,KAAA;MAEAC,QAAA;MAEAC,MAAA;MACAC,SAAA;MAEAL,SAAA;MACAM,aAAA,EAAAN,SAAA;MAEAO,MAAA;MACAC,OAAA;MACAC,UAAA;MACAC,OAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAlB,MAAA;MACA;QAAAmB;MAAA;MAEAA,UAAA;IACA;EACA;EACAC,OAAA;IACAC,yBAAA;MACA;QAAAC;MAAA;MAEAA,WAAA;IACA;IACAA,YAAA;MACA;QAAAC,kBAAA;QAAAC;MAAA;MAEAD,kBAAA;MAEAC,SAAA;IACA;IACAD,mBAAA;MACA;QAAAhB,KAAA;QAAAE,MAAA;QAAAC;MAAA;MAEA,OAAAe,CAAA,EAAAC,CAAA,IAAAnB,KAAA;MAEA,MAAAoB,aAAA,GAAAF,CAAA,IAAAf,SAAA;MACA,MAAAkB,WAAA,GAAAF,CAAA,IAAAjB,MAAA;MAEA,IAAAG,MAAA,OAAAV,KAAA,CAAAO,MAAA,EAAAoB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,CAAA,KACA,IAAA9B,KAAA,CAAAQ,SAAA,EAAAmB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAE,CAAA,MACAN,aAAA,IAAAM,CAAA,OAAAL,WAAA,IAAAI,CAAA,MACA;MAEA,KAAApB,MAAA,GAAAA,MAAA,CAAAsB,MAAA,EAAAC,GAAA,EAAAC,IAAA,SAAAD,GAAA,KAAAC,IAAA;MACA,MAAAvB,OAAA,QAAAA,OAAA,OAAAX,KAAA,CAAAO,MAAA,GAAAC,SAAA,EACAmB,IAAA,IAAAC,GAAA,CAAAC,GAAA,IACAM,IAAA,CAAAC,MAAA,WAAA5C,YAAA,OAAAgC,CAAA,EAAAA,CAAA,IAAAhC,YAAA,OAAAgC,CAAA,QAAAA,CAAA;MAEA,KAAAZ,UAAA,OAAAZ,KAAA,CAAAO,MAAA,GAAAC,SAAA,EACAmB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,CAAA,KAAAnB,OAAA,CAAAmB,CAAA,IAAAK,IAAA,CAAAC,MAAA;MAEA,KAAAvB,OAAA,OAAAb,KAAA,CAAAO,MAAA,GAAAC,SAAA,EACAmB,IAAA,IAAAC,GAAA,CAAAC,GAAA,IAAAM,IAAA,CAAAC,MAAA;IACA;IACAd,UAAA;MACA;QAAAe,KAAA;QAAAC,MAAA;QAAAjC;MAAA;MAEA,OAAAkB,CAAA,EAAAC,CAAA,IAAAnB,KAAA;MAEA,KAAAC,QAAA,IAAA+B,KAAA,GAAAd,CAAA,EAAAe,MAAA,GAAAd,CAAA;IACA;IACAe,SAAA;MACA;QAAAnB;MAAA;MAEAA,WAAA;IACA;IACAH,WAAA;MACA;QAAAnB,KAAA;QAAAgB;MAAA;MAEA,KAAAC,WAAA,GAAAtB,SAAA,CAAAC,SAAA,CAAAoB,YAAA,SAAAhB,KAAA;IACA;EACA;EACA0C,QAAA;IACA;MAAAvB;IAAA;IAEAA,UAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}