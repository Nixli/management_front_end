{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { uuid } from '../../../util/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport { fade } from '@jiaminghi/color';\nexport default {\n  name: 'DvDecoration9',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    },\n    dur: {\n      type: Number,\n      default: 3\n    }\n  },\n  data() {\n    const id = uuid();\n    return {\n      ref: 'decoration-9',\n      polygonId: `decoration-9-polygon-${id}`,\n      svgWH: [100, 100],\n      svgScale: [1, 1],\n      defaultColor: ['rgba(3, 166, 224, 0.8)', 'rgba(3, 166, 224, 0.5)'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcScale\n      } = this;\n      calcScale();\n    },\n    calcScale() {\n      const {\n        width,\n        height,\n        svgWH\n      } = this;\n      const [w, h] = svgWH;\n      this.svgScale = [width / w, height / h];\n    },\n    onResize() {\n      const {\n        calcScale\n      } = this;\n      calcScale();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    },\n    fade\n  },\n  mounted() {\n    const {\n      mergeColor\n    } = this;\n    mergeColor();\n  }\n};","map":{"version":3,"names":["autoResize","uuid","deepMerge","deepClone","fade","name","mixins","props","color","type","Array","default","dur","Number","data","id","ref","polygonId","svgWH","svgScale","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcScale","width","height","w","h","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration9/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-decoration-9\" :ref=\"ref\">\r\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\r\n      <defs>\r\n        <polygon :id=\"polygonId\" points=\"15, 46.5, 21, 47.5, 21, 52.5, 15, 53.5\" />\r\n      </defs>\r\n\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"45\"\r\n        fill=\"transparent\"\r\n        :stroke=\"mergedColor[1]\"\r\n        stroke-width=\"10\"\r\n        stroke-dasharray=\"80, 100, 30, 100\"\r\n      >\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          type=\"rotate\"\r\n          values=\"0 50 50;360 50 50\"\r\n          :dur=\"`${dur}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </circle>\r\n\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"45\"\r\n        fill=\"transparent\"\r\n        :stroke=\"mergedColor[0]\"\r\n        stroke-width=\"6\"\r\n        stroke-dasharray=\"50, 66, 100, 66\"\r\n      >\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          type=\"rotate\"\r\n          values=\"0 50 50;-360 50 50\"\r\n          :dur=\"`${dur}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </circle>\r\n\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"38\"\r\n        fill=\"transparent\"\r\n        :stroke=\"fade(mergedColor[1] || defaultColor[1], 30)\"\r\n        stroke-width=\"1\"\r\n        stroke-dasharray=\"5, 1\"\r\n      />\r\n\r\n      <use\r\n        v-for=\"(foo, i) in new Array(20).fill(0)\"\r\n        :key=\"i\"\r\n        :xlink:href=\"`#${polygonId}`\"\r\n        :stroke=\"mergedColor[1]\"\r\n        :fill=\"Math.random() > 0.4 ? 'transparent' : mergedColor[0]\"\r\n      >\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          type=\"rotate\"\r\n          values=\"0 50 50;360 50 50\"\r\n          :dur=\"`${dur}s`\"\r\n          :begin=\"`${i * dur / 20}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </use>\r\n\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"26\"\r\n        fill=\"transparent\"\r\n        :stroke=\"fade(mergedColor[1] || defaultColor[1], 30)\"\r\n        stroke-width=\"1\"\r\n        stroke-dasharray=\"5, 1\"\r\n      />\r\n    </svg>\r\n\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport { fade } from '@jiaminghi/color'\r\n\r\nexport default {\r\n  name: 'DvDecoration9',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    dur: {\r\n      type: Number,\r\n      default: 3\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      ref: 'decoration-9',\r\n\r\n      polygonId: `decoration-9-polygon-${id}`,\r\n\r\n      svgWH: [100, 100],\r\n\r\n      svgScale: [1, 1],\r\n\r\n      defaultColor: ['rgba(3, 166, 224, 0.8)', 'rgba(3, 166, 224, 0.5)'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcScale } = this\r\n\r\n      calcScale()\r\n    },\r\n    calcScale () {\r\n      const { width, height, svgWH } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      this.svgScale = [width / w, height / h]\r\n    },\r\n    onResize () {\r\n      const { calcScale } = this\r\n\r\n      calcScale()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    },\r\n    fade\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n</script>"],"mappings":"AAsFA,OAAAA,UAAA;AACA,SAAAC,IAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,IAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAN,UAAA;EACAO,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAC,GAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;EACA;EACAG,KAAA;IACA,MAAAC,EAAA,GAAAd,IAAA;IACA;MACAe,GAAA;MAEAC,SAAA,0BAAAF,EAAA;MAEAG,KAAA;MAEAC,QAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAd,MAAA;MACA;QAAAe;MAAA;MAEAA,UAAA;IACA;EACA;EACAC,OAAA;IACAC,yBAAA;MACA;QAAAC;MAAA;MAEAA,SAAA;IACA;IACAA,UAAA;MACA;QAAAC,KAAA;QAAAC,MAAA;QAAAV;MAAA;MAEA,OAAAW,CAAA,EAAAC,CAAA,IAAAZ,KAAA;MAEA,KAAAC,QAAA,IAAAQ,KAAA,GAAAE,CAAA,EAAAD,MAAA,GAAAE,CAAA;IACA;IACAC,SAAA;MACA;QAAAL;MAAA;MAEAA,SAAA;IACA;IACAH,WAAA;MACA;QAAAf,KAAA;QAAAY;MAAA;MAEA,KAAAC,WAAA,GAAAnB,SAAA,CAAAC,SAAA,CAAAiB,YAAA,SAAAZ,KAAA;IACA;IACAJ;EACA;EACA4B,QAAA;IACA;MAAAT;IAAA;IAEAA,UAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}