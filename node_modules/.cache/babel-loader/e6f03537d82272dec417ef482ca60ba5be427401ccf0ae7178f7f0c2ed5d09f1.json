{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\n/**\r\n * @description Abstract the polyline formed by N points into a set of bezier curve\r\n * @param {Array} polyline A set of points that make up a polyline\r\n * @param {Boolean} close  Closed curve\r\n * @param {Number} offsetA Smoothness\r\n * @param {Number} offsetB Smoothness\r\n * @return {Array|Boolean} A set of bezier curve (Invalid input will return false)\r\n */\nfunction polylineToBezierCurve(polyline) {\n  var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var offsetA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.25;\n  var offsetB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.25;\n  if (!(polyline instanceof Array)) {\n    console.error('polylineToBezierCurve: Parameter polyline must be an array!');\n    return false;\n  }\n  if (polyline.length <= 2) {\n    console.error('polylineToBezierCurve: Converting to a curve requires at least 3 points!');\n    return false;\n  }\n  var startPoint = polyline[0];\n  var bezierCurveLineNum = polyline.length - 1;\n  var bezierCurvePoints = new Array(bezierCurveLineNum).fill(0).map(function (foo, i) {\n    return [].concat((0, _toConsumableArray2[\"default\"])(getBezierCurveLineControlPoints(polyline, i, close, offsetA, offsetB)), [polyline[i + 1]]);\n  });\n  if (close) closeBezierCurve(bezierCurvePoints, startPoint);\n  bezierCurvePoints.unshift(polyline[0]);\n  return bezierCurvePoints;\n}\n/**\r\n * @description Get the control points of the Bezier curve\r\n * @param {Array} polyline A set of points that make up a polyline\r\n * @param {Number} index   The index of which get controls points's point in polyline\r\n * @param {Boolean} close  Closed curve\r\n * @param {Number} offsetA Smoothness\r\n * @param {Number} offsetB Smoothness\r\n * @return {Array} Control points\r\n */\n\nfunction getBezierCurveLineControlPoints(polyline, index) {\n  var close = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var offsetA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.25;\n  var offsetB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.25;\n  var pointNum = polyline.length;\n  if (pointNum < 3 || index >= pointNum) return;\n  var beforePointIndex = index - 1;\n  if (beforePointIndex < 0) beforePointIndex = close ? pointNum + beforePointIndex : 0;\n  var afterPointIndex = index + 1;\n  if (afterPointIndex >= pointNum) afterPointIndex = close ? afterPointIndex - pointNum : pointNum - 1;\n  var afterNextPointIndex = index + 2;\n  if (afterNextPointIndex >= pointNum) afterNextPointIndex = close ? afterNextPointIndex - pointNum : pointNum - 1;\n  var pointBefore = polyline[beforePointIndex];\n  var pointMiddle = polyline[index];\n  var pointAfter = polyline[afterPointIndex];\n  var pointAfterNext = polyline[afterNextPointIndex];\n  return [[pointMiddle[0] + offsetA * (pointAfter[0] - pointBefore[0]), pointMiddle[1] + offsetA * (pointAfter[1] - pointBefore[1])], [pointAfter[0] - offsetB * (pointAfterNext[0] - pointMiddle[0]), pointAfter[1] - offsetB * (pointAfterNext[1] - pointMiddle[1])]];\n}\n/**\r\n * @description Get the last curve of the closure\r\n * @param {Array} bezierCurve A set of sub-curve\r\n * @param {Array} startPoint  Start point\r\n * @return {Array} The last curve for closure\r\n */\n\nfunction closeBezierCurve(bezierCurve, startPoint) {\n  var firstSubCurve = bezierCurve[0];\n  var lastSubCurve = bezierCurve.slice(-1)[0];\n  bezierCurve.push([getSymmetryPoint(lastSubCurve[1], lastSubCurve[2]), getSymmetryPoint(firstSubCurve[0], startPoint), startPoint]);\n  return bezierCurve;\n}\n/**\r\n * @description Get the symmetry point\r\n * @param {Array} point       Symmetric point\r\n * @param {Array} centerPoint Symmetric center\r\n * @return {Array} Symmetric point\r\n */\n\nfunction getSymmetryPoint(point, centerPoint) {\n  var _point = (0, _slicedToArray2[\"default\"])(point, 2),\n    px = _point[0],\n    py = _point[1];\n  var _centerPoint = (0, _slicedToArray2[\"default\"])(centerPoint, 2),\n    cx = _centerPoint[0],\n    cy = _centerPoint[1];\n  var minusX = cx - px;\n  var minusY = cy - py;\n  return [cx + minusX, cy + minusY];\n}\nvar _default = polylineToBezierCurve;\nexports[\"default\"] = _default;","map":{"version":3,"names":["require","_interopRequireDefault","Object","defineProperty","exports","value","_slicedToArray2","_toConsumableArray2","polylineToBezierCurve","polyline","close","arguments","length","undefined","offsetA","offsetB","Array","console","error","startPoint","bezierCurveLineNum","bezierCurvePoints","fill","map","foo","i","concat","getBezierCurveLineControlPoints","closeBezierCurve","unshift","index","pointNum","beforePointIndex","afterPointIndex","afterNextPointIndex","pointBefore","pointMiddle","pointAfter","pointAfterNext","bezierCurve","firstSubCurve","lastSubCurve","slice","push","getSymmetryPoint","point","centerPoint","_point","px","py","_centerPoint","cx","cy","minusX","minusY","_default"],"sources":["E:/2024-gxa-java/javaweb/restaurant_management_system/management_front_end/management_front_end/node_modules/@jiaminghi/bezier-curve/lib/core/polylineToBezierCurve.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = void 0;\r\n\r\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\r\n\r\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\r\n\r\n/**\r\n * @description Abstract the polyline formed by N points into a set of bezier curve\r\n * @param {Array} polyline A set of points that make up a polyline\r\n * @param {Boolean} close  Closed curve\r\n * @param {Number} offsetA Smoothness\r\n * @param {Number} offsetB Smoothness\r\n * @return {Array|Boolean} A set of bezier curve (Invalid input will return false)\r\n */\r\nfunction polylineToBezierCurve(polyline) {\r\n  var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n  var offsetA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.25;\r\n  var offsetB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.25;\r\n\r\n  if (!(polyline instanceof Array)) {\r\n    console.error('polylineToBezierCurve: Parameter polyline must be an array!');\r\n    return false;\r\n  }\r\n\r\n  if (polyline.length <= 2) {\r\n    console.error('polylineToBezierCurve: Converting to a curve requires at least 3 points!');\r\n    return false;\r\n  }\r\n\r\n  var startPoint = polyline[0];\r\n  var bezierCurveLineNum = polyline.length - 1;\r\n  var bezierCurvePoints = new Array(bezierCurveLineNum).fill(0).map(function (foo, i) {\r\n    return [].concat((0, _toConsumableArray2[\"default\"])(getBezierCurveLineControlPoints(polyline, i, close, offsetA, offsetB)), [polyline[i + 1]]);\r\n  });\r\n  if (close) closeBezierCurve(bezierCurvePoints, startPoint);\r\n  bezierCurvePoints.unshift(polyline[0]);\r\n  return bezierCurvePoints;\r\n}\r\n/**\r\n * @description Get the control points of the Bezier curve\r\n * @param {Array} polyline A set of points that make up a polyline\r\n * @param {Number} index   The index of which get controls points's point in polyline\r\n * @param {Boolean} close  Closed curve\r\n * @param {Number} offsetA Smoothness\r\n * @param {Number} offsetB Smoothness\r\n * @return {Array} Control points\r\n */\r\n\r\n\r\nfunction getBezierCurveLineControlPoints(polyline, index) {\r\n  var close = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n  var offsetA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.25;\r\n  var offsetB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.25;\r\n  var pointNum = polyline.length;\r\n  if (pointNum < 3 || index >= pointNum) return;\r\n  var beforePointIndex = index - 1;\r\n  if (beforePointIndex < 0) beforePointIndex = close ? pointNum + beforePointIndex : 0;\r\n  var afterPointIndex = index + 1;\r\n  if (afterPointIndex >= pointNum) afterPointIndex = close ? afterPointIndex - pointNum : pointNum - 1;\r\n  var afterNextPointIndex = index + 2;\r\n  if (afterNextPointIndex >= pointNum) afterNextPointIndex = close ? afterNextPointIndex - pointNum : pointNum - 1;\r\n  var pointBefore = polyline[beforePointIndex];\r\n  var pointMiddle = polyline[index];\r\n  var pointAfter = polyline[afterPointIndex];\r\n  var pointAfterNext = polyline[afterNextPointIndex];\r\n  return [[pointMiddle[0] + offsetA * (pointAfter[0] - pointBefore[0]), pointMiddle[1] + offsetA * (pointAfter[1] - pointBefore[1])], [pointAfter[0] - offsetB * (pointAfterNext[0] - pointMiddle[0]), pointAfter[1] - offsetB * (pointAfterNext[1] - pointMiddle[1])]];\r\n}\r\n/**\r\n * @description Get the last curve of the closure\r\n * @param {Array} bezierCurve A set of sub-curve\r\n * @param {Array} startPoint  Start point\r\n * @return {Array} The last curve for closure\r\n */\r\n\r\n\r\nfunction closeBezierCurve(bezierCurve, startPoint) {\r\n  var firstSubCurve = bezierCurve[0];\r\n  var lastSubCurve = bezierCurve.slice(-1)[0];\r\n  bezierCurve.push([getSymmetryPoint(lastSubCurve[1], lastSubCurve[2]), getSymmetryPoint(firstSubCurve[0], startPoint), startPoint]);\r\n  return bezierCurve;\r\n}\r\n/**\r\n * @description Get the symmetry point\r\n * @param {Array} point       Symmetric point\r\n * @param {Array} centerPoint Symmetric center\r\n * @return {Array} Symmetric point\r\n */\r\n\r\n\r\nfunction getSymmetryPoint(point, centerPoint) {\r\n  var _point = (0, _slicedToArray2[\"default\"])(point, 2),\r\n      px = _point[0],\r\n      py = _point[1];\r\n\r\n  var _centerPoint = (0, _slicedToArray2[\"default\"])(centerPoint, 2),\r\n      cx = _centerPoint[0],\r\n      cy = _centerPoint[1];\r\n\r\n  var minusX = cx - px;\r\n  var minusY = cy - py;\r\n  return [cx + minusX, cy + minusY];\r\n}\r\n\r\nvar _default = polylineToBezierCurve;\r\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}