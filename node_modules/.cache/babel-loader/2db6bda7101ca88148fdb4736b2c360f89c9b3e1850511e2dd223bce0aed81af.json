{"ast":null,"code":"import { uuid } from '../../../util/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport CRender from '@jiaminghi/c-render';\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data() {\n    const id = uuid();\n    return {\n      gradientId: `water-level-pond-${id}`,\n      defaultConfig: {\n        /**\r\n         * @description Data\r\n         * @type {Array<Number>}\r\n         * @default data = []\r\n         * @example data = [60, 40]\r\n         */\n        data: [],\n        /**\r\n         * @description Shape of wanter level pond\r\n         * @type {String}\r\n         * @default shape = 'rect'\r\n         * @example shape = 'rect' | 'roundRect' | 'round'\r\n         */\n        shape: 'rect',\n        /**\r\n         * @description Water wave number\r\n         * @type {Number}\r\n         * @default waveNum = 3\r\n         */\n        waveNum: 3,\n        /**\r\n         * @description Water wave height (px)\r\n         * @type {Number}\r\n         * @default waveHeight = 40\r\n         */\n        waveHeight: 40,\n        /**\r\n         * @description Wave opacity\r\n         * @type {Number}\r\n         * @default waveOpacity = 0.4\r\n         */\n        waveOpacity: 0.4,\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default colors = ['#00BAFF', '#3DE7C9']\r\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\r\n         * @description Formatter\r\n         * @type {String}\r\n         * @default formatter = '{value}%'\r\n         */\n        formatter: '{value}%'\n      },\n      mergedConfig: {},\n      renderer: null,\n      svgBorderGradient: [],\n      details: '',\n      waves: [],\n      animation: false\n    };\n  },\n  computed: {\n    radius() {\n      const {\n        shape\n      } = this.mergedConfig;\n      if (shape === 'round') return '50%';\n      if (shape === 'rect') return '0';\n      if (shape === 'roundRect') return '10px';\n      return '0';\n    },\n    shape() {\n      const {\n        shape\n      } = this.mergedConfig;\n      if (!shape) return 'rect';\n      return shape;\n    }\n  },\n  watch: {\n    config() {\n      const {\n        calcData,\n        renderer\n      } = this;\n      renderer.delAllGraph();\n      this.waves = [];\n      setTimeout(calcData, 0);\n    }\n  },\n  methods: {\n    init() {\n      const {\n        initRender,\n        config,\n        calcData\n      } = this;\n      initRender();\n      if (!config) return;\n      calcData();\n    },\n    initRender() {\n      const {\n        $refs\n      } = this;\n      this.renderer = new CRender($refs['water-pond-level']);\n    },\n    calcData() {\n      const {\n        mergeConfig,\n        calcSvgBorderGradient,\n        calcDetails\n      } = this;\n      mergeConfig();\n      calcSvgBorderGradient();\n      calcDetails();\n      const {\n        addWave,\n        animationWave\n      } = this;\n      addWave();\n      animationWave();\n    },\n    mergeConfig() {\n      const {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config);\n    },\n    calcSvgBorderGradient() {\n      const {\n        colors\n      } = this.mergedConfig;\n      const colorNum = colors.length;\n      const colorOffsetGap = 100 / (colorNum - 1);\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c]);\n    },\n    calcDetails() {\n      const {\n        data,\n        formatter\n      } = this.mergedConfig;\n      if (!data.length) {\n        this.details = '';\n        return;\n      }\n      const maxValue = Math.max(...data);\n      this.details = formatter.replace('{value}', maxValue);\n    },\n    addWave() {\n      const {\n        renderer,\n        getWaveShapes,\n        getWaveStyle,\n        drawed\n      } = this;\n      const shapes = getWaveShapes();\n      const style = getWaveStyle();\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }));\n    },\n    getWaveShapes() {\n      const {\n        mergedConfig,\n        renderer,\n        mergeOffset\n      } = this;\n      const {\n        waveNum,\n        waveHeight,\n        data\n      } = mergedConfig;\n      const [w, h] = renderer.area;\n      const pointsNum = waveNum * 4 + 4;\n      const pointXGap = w / waveNum / 2;\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j;\n          const startY = (1 - v / 100) * h;\n          const y = j % 2 === 0 ? startY : startY - waveHeight;\n          return [x, y];\n        });\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]));\n        return {\n          points\n        };\n      });\n    },\n    mergeOffset([x, y], [ox, oy]) {\n      return [x + ox, y + oy];\n    },\n    getWaveStyle() {\n      const {\n        renderer,\n        mergedConfig\n      } = this;\n      const h = renderer.area[1];\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      };\n    },\n    drawed({\n      shape: {\n        points\n      }\n    }, {\n      ctx,\n      area\n    }) {\n      const firstPoint = points[0];\n      const lastPoint = points.slice(-1)[0];\n      const h = area[1];\n      ctx.lineTo(lastPoint[0], h);\n      ctx.lineTo(firstPoint[0], h);\n      ctx.closePath();\n      ctx.fill();\n    },\n    async animationWave(repeat = 1) {\n      const {\n        waves,\n        renderer,\n        animation\n      } = this;\n      if (animation) return;\n      this.animation = true;\n      const w = renderer.area[0];\n      waves.forEach(graph => {\n        graph.attr('style', {\n          translate: [0, 0]\n        });\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true);\n      });\n      await renderer.launchAnimation();\n      this.animation = false;\n      if (!renderer.graphs.length) return;\n      this.animationWave(repeat + 1);\n    }\n  },\n  mounted() {\n    const {\n      init\n    } = this;\n    init();\n  },\n  beforeDestroy() {\n    const {\n      renderer\n    } = this;\n    renderer.delAllGraph();\n    this.waves = [];\n  }\n};","map":{"version":3,"names":["uuid","deepMerge","deepClone","CRender","name","props","config","Object","default","data","id","gradientId","defaultConfig","shape","waveNum","waveHeight","waveOpacity","colors","formatter","mergedConfig","renderer","svgBorderGradient","details","waves","animation","computed","radius","watch","calcData","delAllGraph","setTimeout","methods","init","initRender","$refs","mergeConfig","calcSvgBorderGradient","calcDetails","addWave","animationWave","colorNum","length","colorOffsetGap","map","c","i","maxValue","Math","max","replace","getWaveShapes","getWaveStyle","drawed","shapes","style","add","animationFrame","mergeOffset","w","h","area","pointsNum","pointXGap","v","points","Array","fill","foo","j","x","startY","y","p","ox","oy","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","ctx","firstPoint","lastPoint","slice","lineTo","closePath","repeat","forEach","graph","attr","launchAnimation","graphs","mounted","beforeDestroy"],"sources":["node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-water-pond-level\">\r\n    <svg v-if=\"renderer\">\r\n      <defs>\r\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\r\n            :offset=\"lc[0]\"\r\n            :stop-color=\"lc[1]\" />\r\n        </linearGradient>\r\n      </defs>\r\n\r\n      <text\r\n        v-if=\"renderer\"\r\n        :stroke=\"`url(#${gradientId})`\"\r\n        :fill=\"`url(#${gradientId})`\"\r\n        :x=\"renderer.area[0] / 2 + 8\"\r\n        :y=\"renderer.area[1] / 2 + 8\"\r\n      >\r\n        {{ details }}\r\n      </text>\r\n\r\n      <ellipse v-if=\"!shape || shape === 'round'\"\r\n        :cx=\"renderer.area[0] / 2 + 8\"\r\n        :cy=\"renderer.area[1] / 2 + 8\"\r\n        :rx=\"renderer.area[0] / 2 + 5\"\r\n        :ry=\"renderer.area[1] / 2 + 5\"\r\n        :stroke=\"`url(#${gradientId})`\" />\r\n\r\n      <rect v-else\r\n        x=\"2\" y=\"2\"\r\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\r\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\r\n        :width=\"renderer.area[0] + 12\"\r\n        :height=\"renderer.area[1] + 12\"\r\n        :stroke=\"`url(#${gradientId})`\" />\r\n    </svg>\r\n\r\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport CRender from '@jiaminghi/c-render'\r\n\r\nexport default {\r\n  name: 'DvWaterLevelPond',\r\n  props: {\r\n    config: Object,\r\n    default: () => ({})\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      gradientId: `water-level-pond-${id}`,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Data\r\n         * @type {Array<Number>}\r\n         * @default data = []\r\n         * @example data = [60, 40]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Shape of wanter level pond\r\n         * @type {String}\r\n         * @default shape = 'rect'\r\n         * @example shape = 'rect' | 'roundRect' | 'round'\r\n         */\r\n        shape: 'rect',\r\n        /**\r\n         * @description Water wave number\r\n         * @type {Number}\r\n         * @default waveNum = 3\r\n         */\r\n        waveNum: 3,\r\n        /**\r\n         * @description Water wave height (px)\r\n         * @type {Number}\r\n         * @default waveHeight = 40\r\n         */\r\n        waveHeight: 40,\r\n        /**\r\n         * @description Wave opacity\r\n         * @type {Number}\r\n         * @default waveOpacity = 0.4\r\n         */\r\n        waveOpacity: 0.4,\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default colors = ['#00BAFF', '#3DE7C9']\r\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: ['#3DE7C9', '#00BAFF'],\r\n        /**\r\n         * @description Formatter\r\n         * @type {String}\r\n         * @default formatter = '{value}%'\r\n         */\r\n        formatter: '{value}%'\r\n      },\r\n\r\n      mergedConfig: {},\r\n\r\n      renderer: null,\r\n\r\n      svgBorderGradient: [],\r\n\r\n      details: '',\r\n\r\n      waves: [],\r\n\r\n      animation: false\r\n    }\r\n  },\r\n  computed: {\r\n    radius () {\r\n      const { shape } = this.mergedConfig\r\n\r\n      if (shape === 'round') return '50%'\r\n\r\n      if (shape === 'rect') return '0'\r\n\r\n      if (shape === 'roundRect') return '10px'\r\n\r\n      return '0'\r\n    },\r\n    shape () {\r\n      const { shape } = this.mergedConfig\r\n\r\n      if (!shape) return 'rect'\r\n\r\n      return shape\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData, renderer } = this\r\n\r\n      renderer.delAllGraph()\r\n\r\n      this.waves = []\r\n\r\n      setTimeout(calcData, 0)\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      const { initRender, config, calcData } = this\r\n\r\n      initRender()\r\n\r\n      if (!config) return\r\n\r\n      calcData()\r\n    },\r\n    initRender () {\r\n      const { $refs } = this\r\n\r\n      this.renderer = new CRender($refs['water-pond-level'])\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcSvgBorderGradient()\r\n\r\n      calcDetails()\r\n\r\n      const { addWave, animationWave } = this\r\n\r\n      addWave()\r\n\r\n      animationWave()\r\n    },\r\n    mergeConfig () {\r\n      const { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\r\n    },\r\n    calcSvgBorderGradient () {\r\n      const { colors } = this.mergedConfig\r\n\r\n      const colorNum = colors.length\r\n\r\n      const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\r\n    },\r\n    calcDetails () {\r\n      const { data, formatter } = this.mergedConfig\r\n\r\n      if (!data.length) {\r\n        this.details = ''\r\n\r\n        return\r\n      }\r\n\r\n      const maxValue = Math.max(...data)\r\n\r\n      this.details = formatter.replace('{value}', maxValue)\r\n    },\r\n    addWave () {\r\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\r\n\r\n      const shapes = getWaveShapes()\r\n      const style = getWaveStyle()\r\n\r\n      this.waves = shapes.map(shape => renderer.add({\r\n        name: 'smoothline',\r\n        animationFrame: 300,\r\n        shape,\r\n        style,\r\n        drawed\r\n      }))\r\n    },\r\n    getWaveShapes () {\r\n      const { mergedConfig, renderer, mergeOffset } = this\r\n\r\n      const { waveNum, waveHeight, data } = mergedConfig\r\n\r\n      const [w, h] = renderer.area\r\n\r\n      const pointsNum = waveNum * 4 + 4\r\n\r\n      const pointXGap = w / waveNum / 2\r\n\r\n      return data.map(v => {\r\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\r\n          const x = w - pointXGap * j\r\n\r\n          const startY = (1 - v / 100) * h\r\n\r\n          const y = j % 2 === 0 ? startY : startY - waveHeight\r\n\r\n          return [x, y]\r\n        })\r\n\r\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\r\n\r\n        return { points }\r\n      })\r\n    },\r\n    mergeOffset ([x, y], [ox, oy]) {\r\n      return [x + ox, y + oy]\r\n    },\r\n    getWaveStyle () {\r\n      const { renderer, mergedConfig } = this\r\n\r\n      const h = renderer.area[1]\r\n\r\n      return {\r\n        gradientColor: mergedConfig.colors,\r\n        gradientType: 'linear',\r\n        gradientParams: [0, 0, 0, h],\r\n        gradientWith: 'fill',\r\n        opacity: mergedConfig.waveOpacity,\r\n        translate: [0, 0]\r\n      }\r\n    },\r\n    drawed ({ shape: { points } }, { ctx, area }) {\r\n      const firstPoint = points[0]\r\n      const lastPoint = points.slice(-1)[0]\r\n\r\n      const h = area[1]\r\n\r\n      ctx.lineTo(lastPoint[0], h)\r\n      ctx.lineTo(firstPoint[0], h)\r\n\r\n      ctx.closePath()\r\n\r\n      ctx.fill()\r\n    },\r\n    async animationWave (repeat = 1) {\r\n      const { waves, renderer, animation } = this\r\n\r\n      if (animation) return\r\n\r\n      this.animation = true\r\n\r\n      const w = renderer.area[0]\r\n\r\n      waves.forEach(graph => {\r\n        graph.attr('style', { translate: [0, 0] })\r\n\r\n        graph.animation('style', {\r\n          translate: [w, 0]\r\n        }, true)\r\n      })\r\n\r\n      await renderer.launchAnimation()\r\n\r\n      this.animation = false\r\n\r\n      if (!renderer.graphs.length) return\r\n\r\n      this.animationWave(repeat + 1)\r\n    }\r\n  },\r\n  mounted () {\r\n    const { init } = this\r\n\r\n    init()\r\n  },\r\n  beforeDestroy () {\r\n    const { renderer } = this\r\n\r\n    renderer.delAllGraph()\r\n\r\n    this.waves = []\r\n  }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}